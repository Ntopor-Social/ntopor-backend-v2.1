/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  VoteEvent as PrismaVoteEvent,
  Media as PrismaMedia,
  VoteEventCandidate as PrismaVoteEventCandidate,
  User as PrismaUser,
} from "@prisma/client";

export class VoteEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VoteEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.voteEvent.count(args);
  }

  async voteEvents(
    args: Prisma.VoteEventFindManyArgs
  ): Promise<PrismaVoteEvent[]> {
    return this.prisma.voteEvent.findMany(args);
  }
  async voteEvent(
    args: Prisma.VoteEventFindUniqueArgs
  ): Promise<PrismaVoteEvent | null> {
    return this.prisma.voteEvent.findUnique(args);
  }
  async createVoteEvent(
    args: Prisma.VoteEventCreateArgs
  ): Promise<PrismaVoteEvent> {
    return this.prisma.voteEvent.create(args);
  }
  async updateVoteEvent(
    args: Prisma.VoteEventUpdateArgs
  ): Promise<PrismaVoteEvent> {
    return this.prisma.voteEvent.update(args);
  }
  async deleteVoteEvent(
    args: Prisma.VoteEventDeleteArgs
  ): Promise<PrismaVoteEvent> {
    return this.prisma.voteEvent.delete(args);
  }

  async findMediaItems(
    parentId: string,
    args: Prisma.MediaFindManyArgs
  ): Promise<PrismaMedia[]> {
    return this.prisma.voteEvent
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .mediaItems(args);
  }

  async findVoteEventCandidates(
    parentId: string,
    args: Prisma.VoteEventCandidateFindManyArgs
  ): Promise<PrismaVoteEventCandidate[]> {
    return this.prisma.voteEvent
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .voteEventCandidates(args);
  }

  async getOrganizer(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.voteEvent
      .findUnique({
        where: { id: parentId },
      })
      .organizer();
  }
}
