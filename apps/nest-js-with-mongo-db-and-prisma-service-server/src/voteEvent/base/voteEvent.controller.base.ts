/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { VoteEventService } from "../voteEvent.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { VoteEventCreateInput } from "./VoteEventCreateInput";
import { VoteEvent } from "./VoteEvent";
import { Post } from "../../post/base/Post";
import { VoteEventFindManyArgs } from "./VoteEventFindManyArgs";
import { VoteEventWhereUniqueInput } from "./VoteEventWhereUniqueInput";
import { VoteEventUpdateInput } from "./VoteEventUpdateInput";
import { MediaFindManyArgs } from "../../media/base/MediaFindManyArgs";
import { Media } from "../../media/base/Media";
import { MediaWhereUniqueInput } from "../../media/base/MediaWhereUniqueInput";
import { VoteEventCandidateFindManyArgs } from "../../voteEventCandidate/base/VoteEventCandidateFindManyArgs";
import { VoteEventCandidate } from "../../voteEventCandidate/base/VoteEventCandidate";
import { VoteEventCandidateWhereUniqueInput } from "../../voteEventCandidate/base/VoteEventCandidateWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class VoteEventControllerBase {
  constructor(
    protected readonly service: VoteEventService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VoteEvent })
  @nestAccessControl.UseRoles({
    resource: "VoteEvent",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createVoteEvent(
    @common.Body() data: VoteEventCreateInput
  ): Promise<VoteEvent> {
    return await this.service.createVoteEvent({
      data: {
        ...data,

        organizer: data.organizer
          ? {
              connect: data.organizer,
            }
          : undefined,
      },
      select: {
        accumulated: true,
        balance: true,
        createdAt: true,
        currency: true,
        dateCreated: true,
        endDate: true,
        eventBio: true,
        eventLink: true,
        eventName: true,
        eventPriceType: true,
        gallery: true,
        id: true,
        isFeatured: true,
        isPrivate: true,

        organizer: {
          select: {
            id: true,
          },
        },

        startDate: true,
        ticketsSold: true,
        updatedAt: true,
        voteLimit: true,
        votePrice: true,
        votesAvailable: true,
        votesPerUser: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [VoteEvent] })
  @ApiNestedQuery(VoteEventFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "VoteEvent",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async voteEvents(@common.Req() request: Request): Promise<VoteEvent[]> {
    const args = plainToClass(VoteEventFindManyArgs, request.query);
    return this.service.voteEvents({
      ...args,
      select: {
        accumulated: true,
        balance: true,
        createdAt: true,
        currency: true,
        dateCreated: true,
        endDate: true,
        eventBio: true,
        eventLink: true,
        eventName: true,
        eventPriceType: true,
        gallery: true,
        id: true,
        isFeatured: true,
        isPrivate: true,

        organizer: {
          select: {
            id: true,
          },
        },

        startDate: true,
        ticketsSold: true,
        updatedAt: true,
        voteLimit: true,
        votePrice: true,
        votesAvailable: true,
        votesPerUser: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VoteEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VoteEvent",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async voteEvent(
    @common.Param() params: VoteEventWhereUniqueInput
  ): Promise<VoteEvent | null> {
    const result = await this.service.voteEvent({
      where: params,
      select: {
        accumulated: true,
        balance: true,
        createdAt: true,
        currency: true,
        dateCreated: true,
        endDate: true,
        eventBio: true,
        eventLink: true,
        eventName: true,
        eventPriceType: true,
        gallery: true,
        id: true,
        isFeatured: true,
        isPrivate: true,

        organizer: {
          select: {
            id: true,
          },
        },

        startDate: true,
        ticketsSold: true,
        updatedAt: true,
        voteLimit: true,
        votePrice: true,
        votesAvailable: true,
        votesPerUser: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VoteEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VoteEvent",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateVoteEvent(
    @common.Param() params: VoteEventWhereUniqueInput,
    @common.Body() data: VoteEventUpdateInput
  ): Promise<VoteEvent | null> {
    try {
      return await this.service.updateVoteEvent({
        where: params,
        data: {
          ...data,

          organizer: data.organizer
            ? {
                connect: data.organizer,
              }
            : undefined,
        },
        select: {
          accumulated: true,
          balance: true,
          createdAt: true,
          currency: true,
          dateCreated: true,
          endDate: true,
          eventBio: true,
          eventLink: true,
          eventName: true,
          eventPriceType: true,
          gallery: true,
          id: true,
          isFeatured: true,
          isPrivate: true,

          organizer: {
            select: {
              id: true,
            },
          },

          startDate: true,
          ticketsSold: true,
          updatedAt: true,
          voteLimit: true,
          votePrice: true,
          votesAvailable: true,
          votesPerUser: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VoteEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VoteEvent",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteVoteEvent(
    @common.Param() params: VoteEventWhereUniqueInput
  ): Promise<VoteEvent | null> {
    try {
      return await this.service.deleteVoteEvent({
        where: params,
        select: {
          accumulated: true,
          balance: true,
          createdAt: true,
          currency: true,
          dateCreated: true,
          endDate: true,
          eventBio: true,
          eventLink: true,
          eventName: true,
          eventPriceType: true,
          gallery: true,
          id: true,
          isFeatured: true,
          isPrivate: true,

          organizer: {
            select: {
              id: true,
            },
          },

          startDate: true,
          ticketsSold: true,
          updatedAt: true,
          voteLimit: true,
          votePrice: true,
          votesAvailable: true,
          votesPerUser: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/mediaItems")
  @ApiNestedQuery(MediaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Media",
    action: "read",
    possession: "any",
  })
  async findMediaItems(
    @common.Req() request: Request,
    @common.Param() params: VoteEventWhereUniqueInput
  ): Promise<Media[]> {
    const query = plainToClass(MediaFindManyArgs, request.query);
    const results = await this.service.findMediaItems(params.id, {
      ...query,
      select: {
        comment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateCreated: true,
        duration: true,

        event: {
          select: {
            id: true,
          },
        },

        height: true,
        id: true,

        message: {
          select: {
            id: true,
          },
        },

        meta: true,
        metaType: true,

        post: {
          select: {
            id: true,
          },
        },

        thumbnail: true,
        typeField: true,
        updatedAt: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },

        voteEvent: {
          select: {
            id: true,
          },
        },

        voteEventCandidate: {
          select: {
            id: true,
          },
        },

        voteEventCandidateMedia: {
          select: {
            id: true,
          },
        },

        width: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mediaItems")
  @nestAccessControl.UseRoles({
    resource: "VoteEvent",
    action: "update",
    possession: "any",
  })
  async connectMediaItems(
    @common.Param() params: VoteEventWhereUniqueInput,
    @common.Body() body: MediaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mediaItems: {
        connect: body,
      },
    };
    await this.service.updateVoteEvent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mediaItems")
  @nestAccessControl.UseRoles({
    resource: "VoteEvent",
    action: "update",
    possession: "any",
  })
  async updateMediaItems(
    @common.Param() params: VoteEventWhereUniqueInput,
    @common.Body() body: MediaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mediaItems: {
        set: body,
      },
    };
    await this.service.updateVoteEvent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mediaItems")
  @nestAccessControl.UseRoles({
    resource: "VoteEvent",
    action: "update",
    possession: "any",
  })
  async disconnectMediaItems(
    @common.Param() params: VoteEventWhereUniqueInput,
    @common.Body() body: MediaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mediaItems: {
        disconnect: body,
      },
    };
    await this.service.updateVoteEvent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/voteEventCandidates")
  @ApiNestedQuery(VoteEventCandidateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "read",
    possession: "any",
  })
  async findVoteEventCandidates(
    @common.Req() request: Request,
    @common.Param() params: VoteEventWhereUniqueInput
  ): Promise<VoteEventCandidate[]> {
    const query = plainToClass(VoteEventCandidateFindManyArgs, request.query);
    const results = await this.service.findVoteEventCandidates(params.id, {
      ...query,
      select: {
        candidacyPhoto: {
          select: {
            id: true,
          },
        },

        candidateBio: true,
        candidateName: true,

        candidateProfile: {
          select: {
            id: true,
          },
        },

        candidateUsername: true,
        createdAt: true,
        dateCreated: true,
        id: true,
        updatedAt: true,

        voteEvent: {
          select: {
            id: true,
          },
        },

        votes: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/voteEventCandidates")
  @nestAccessControl.UseRoles({
    resource: "VoteEvent",
    action: "update",
    possession: "any",
  })
  async connectVoteEventCandidates(
    @common.Param() params: VoteEventWhereUniqueInput,
    @common.Body() body: VoteEventCandidateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      voteEventCandidates: {
        connect: body,
      },
    };
    await this.service.updateVoteEvent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/voteEventCandidates")
  @nestAccessControl.UseRoles({
    resource: "VoteEvent",
    action: "update",
    possession: "any",
  })
  async updateVoteEventCandidates(
    @common.Param() params: VoteEventWhereUniqueInput,
    @common.Body() body: VoteEventCandidateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      voteEventCandidates: {
        set: body,
      },
    };
    await this.service.updateVoteEvent({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/voteEventCandidates")
  @nestAccessControl.UseRoles({
    resource: "VoteEvent",
    action: "update",
    possession: "any",
  })
  async disconnectVoteEventCandidates(
    @common.Param() params: VoteEventWhereUniqueInput,
    @common.Body() body: VoteEventCandidateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      voteEventCandidates: {
        disconnect: body,
      },
    };
    await this.service.updateVoteEvent({
      where: params,
      data,
      select: { id: true },
    });
  }
}
