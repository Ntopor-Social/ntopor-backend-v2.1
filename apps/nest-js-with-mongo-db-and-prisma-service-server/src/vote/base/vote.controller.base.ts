/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { VoteService } from "../vote.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { VoteCreateInput } from "./VoteCreateInput";
import { Vote } from "./Vote";
import { Post } from "../../post/base/Post";
import { VoteFindManyArgs } from "./VoteFindManyArgs";
import { VoteWhereUniqueInput } from "./VoteWhereUniqueInput";
import { VoteUpdateInput } from "./VoteUpdateInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class VoteControllerBase {
  constructor(
    protected readonly service: VoteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Vote })
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createVote(@common.Body() data: VoteCreateInput): Promise<Vote> {
    return await this.service.createVote({
      data: {
        ...data,

        voteEventCandidate: data.voteEventCandidate
          ? {
              connect: data.voteEventCandidate,
            }
          : undefined,
      },
      select: {
        candidate: true,
        createdAt: true,
        currency: true,
        dateCreated: true,
        id: true,
        paid: true,
        quantity: true,
        updatedAt: true,

        voteEventCandidate: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Vote] })
  @ApiNestedQuery(VoteFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async votes(@common.Req() request: Request): Promise<Vote[]> {
    const args = plainToClass(VoteFindManyArgs, request.query);
    return this.service.votes({
      ...args,
      select: {
        candidate: true,
        createdAt: true,
        currency: true,
        dateCreated: true,
        id: true,
        paid: true,
        quantity: true,
        updatedAt: true,

        voteEventCandidate: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Vote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async vote(
    @common.Param() params: VoteWhereUniqueInput
  ): Promise<Vote | null> {
    const result = await this.service.vote({
      where: params,
      select: {
        candidate: true,
        createdAt: true,
        currency: true,
        dateCreated: true,
        id: true,
        paid: true,
        quantity: true,
        updatedAt: true,

        voteEventCandidate: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Vote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateVote(
    @common.Param() params: VoteWhereUniqueInput,
    @common.Body() data: VoteUpdateInput
  ): Promise<Vote | null> {
    try {
      return await this.service.updateVote({
        where: params,
        data: {
          ...data,

          voteEventCandidate: data.voteEventCandidate
            ? {
                connect: data.voteEventCandidate,
              }
            : undefined,
        },
        select: {
          candidate: true,
          createdAt: true,
          currency: true,
          dateCreated: true,
          id: true,
          paid: true,
          quantity: true,
          updatedAt: true,

          voteEventCandidate: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Vote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteVote(
    @common.Param() params: VoteWhereUniqueInput
  ): Promise<Vote | null> {
    try {
      return await this.service.deleteVote({
        where: params,
        select: {
          candidate: true,
          createdAt: true,
          currency: true,
          dateCreated: true,
          id: true,
          paid: true,
          quantity: true,
          updatedAt: true,

          voteEventCandidate: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/voter")
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findVoter(
    @common.Req() request: Request,
    @common.Param() params: VoteWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findVoter(params.id, {
      ...query,
      select: {
        accountVerification: true,
        bio: true,
        blocked: true,
        createdAt: true,
        dateCreated: true,
        devices: true,
        dob: true,
        email: true,
        enterpriseLocation: true,
        enterpriseName: true,

        eventVotes: {
          select: {
            id: true,
          },
        },

        firstName: true,
        id: true,
        isAccountActive: true,
        isAdmin: true,
        isAppleAuth: true,
        isBlocked: true,
        isEmailVerified: true,
        isGoogleAuth: true,
        isPhoneVerified: true,
        isVerified: true,
        language: true,
        lastName: true,
        name: true,
        otp: true,
        passwordhash: true,
        phone: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/voter")
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "update",
    possession: "any",
  })
  async connectVoter(
    @common.Param() params: VoteWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      voter: {
        connect: body,
      },
    };
    await this.service.updateVote({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/voter")
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "update",
    possession: "any",
  })
  async updateVoter(
    @common.Param() params: VoteWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      voter: {
        set: body,
      },
    };
    await this.service.updateVote({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/voter")
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "update",
    possession: "any",
  })
  async disconnectVoter(
    @common.Param() params: VoteWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      voter: {
        disconnect: body,
      },
    };
    await this.service.updateVote({
      where: params,
      data,
      select: { id: true },
    });
  }
}
