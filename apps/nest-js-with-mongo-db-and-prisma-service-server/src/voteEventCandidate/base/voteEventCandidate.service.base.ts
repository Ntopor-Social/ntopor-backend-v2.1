/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  VoteEventCandidate as PrismaVoteEventCandidate,
  Media as PrismaMedia,
  User as PrismaUser,
  VoteEvent as PrismaVoteEvent,
  Vote as PrismaVote,
} from "@prisma/client";

export class VoteEventCandidateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VoteEventCandidateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.voteEventCandidate.count(args);
  }

  async voteEventCandidates(
    args: Prisma.VoteEventCandidateFindManyArgs
  ): Promise<PrismaVoteEventCandidate[]> {
    return this.prisma.voteEventCandidate.findMany(args);
  }
  async voteEventCandidate(
    args: Prisma.VoteEventCandidateFindUniqueArgs
  ): Promise<PrismaVoteEventCandidate | null> {
    return this.prisma.voteEventCandidate.findUnique(args);
  }
  async createVoteEventCandidate(
    args: Prisma.VoteEventCandidateCreateArgs
  ): Promise<PrismaVoteEventCandidate> {
    return this.prisma.voteEventCandidate.create(args);
  }
  async updateVoteEventCandidate(
    args: Prisma.VoteEventCandidateUpdateArgs
  ): Promise<PrismaVoteEventCandidate> {
    return this.prisma.voteEventCandidate.update(args);
  }
  async deleteVoteEventCandidate(
    args: Prisma.VoteEventCandidateDeleteArgs
  ): Promise<PrismaVoteEventCandidate> {
    return this.prisma.voteEventCandidate.delete(args);
  }

  async findMedia(
    parentId: string,
    args: Prisma.MediaFindManyArgs
  ): Promise<PrismaMedia[]> {
    return this.prisma.voteEventCandidate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .media(args);
  }

  async getCandidacyPhoto(parentId: string): Promise<PrismaMedia | null> {
    return this.prisma.voteEventCandidate
      .findUnique({
        where: { id: parentId },
      })
      .candidacyPhoto();
  }

  async getCandidateProfile(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.voteEventCandidate
      .findUnique({
        where: { id: parentId },
      })
      .candidateProfile();
  }

  async getVoteEvent(parentId: string): Promise<PrismaVoteEvent | null> {
    return this.prisma.voteEventCandidate
      .findUnique({
        where: { id: parentId },
      })
      .voteEvent();
  }

  async getVotes(parentId: string): Promise<PrismaVote | null> {
    return this.prisma.voteEventCandidate
      .findUnique({
        where: { id: parentId },
      })
      .votes();
  }
}
