/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { VoteEventCandidateService } from "../voteEventCandidate.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { VoteEventCandidateCreateInput } from "./VoteEventCandidateCreateInput";
import { VoteEventCandidate } from "./VoteEventCandidate";
import { Post } from "../../post/base/Post";
import { VoteEventCandidateFindManyArgs } from "./VoteEventCandidateFindManyArgs";
import { VoteEventCandidateWhereUniqueInput } from "./VoteEventCandidateWhereUniqueInput";
import { VoteEventCandidateUpdateInput } from "./VoteEventCandidateUpdateInput";
import { MediaFindManyArgs } from "../../media/base/MediaFindManyArgs";
import { Media } from "../../media/base/Media";
import { MediaWhereUniqueInput } from "../../media/base/MediaWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class VoteEventCandidateControllerBase {
  constructor(
    protected readonly service: VoteEventCandidateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VoteEventCandidate })
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createVoteEventCandidate(
    @common.Body() data: VoteEventCandidateCreateInput
  ): Promise<VoteEventCandidate> {
    return await this.service.createVoteEventCandidate({
      data: {
        ...data,

        candidacyPhoto: data.candidacyPhoto
          ? {
              connect: data.candidacyPhoto,
            }
          : undefined,

        candidateProfile: data.candidateProfile
          ? {
              connect: data.candidateProfile,
            }
          : undefined,

        voteEvent: data.voteEvent
          ? {
              connect: data.voteEvent,
            }
          : undefined,

        votes: data.votes
          ? {
              connect: data.votes,
            }
          : undefined,
      },
      select: {
        candidacyPhoto: {
          select: {
            id: true,
          },
        },

        candidateBio: true,
        candidateName: true,

        candidateProfile: {
          select: {
            id: true,
          },
        },

        candidateUsername: true,
        createdAt: true,
        dateCreated: true,
        id: true,
        updatedAt: true,

        voteEvent: {
          select: {
            id: true,
          },
        },

        votes: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [VoteEventCandidate] })
  @ApiNestedQuery(VoteEventCandidateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async voteEventCandidates(
    @common.Req() request: Request
  ): Promise<VoteEventCandidate[]> {
    const args = plainToClass(VoteEventCandidateFindManyArgs, request.query);
    return this.service.voteEventCandidates({
      ...args,
      select: {
        candidacyPhoto: {
          select: {
            id: true,
          },
        },

        candidateBio: true,
        candidateName: true,

        candidateProfile: {
          select: {
            id: true,
          },
        },

        candidateUsername: true,
        createdAt: true,
        dateCreated: true,
        id: true,
        updatedAt: true,

        voteEvent: {
          select: {
            id: true,
          },
        },

        votes: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VoteEventCandidate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async voteEventCandidate(
    @common.Param() params: VoteEventCandidateWhereUniqueInput
  ): Promise<VoteEventCandidate | null> {
    const result = await this.service.voteEventCandidate({
      where: params,
      select: {
        candidacyPhoto: {
          select: {
            id: true,
          },
        },

        candidateBio: true,
        candidateName: true,

        candidateProfile: {
          select: {
            id: true,
          },
        },

        candidateUsername: true,
        createdAt: true,
        dateCreated: true,
        id: true,
        updatedAt: true,

        voteEvent: {
          select: {
            id: true,
          },
        },

        votes: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VoteEventCandidate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateVoteEventCandidate(
    @common.Param() params: VoteEventCandidateWhereUniqueInput,
    @common.Body() data: VoteEventCandidateUpdateInput
  ): Promise<VoteEventCandidate | null> {
    try {
      return await this.service.updateVoteEventCandidate({
        where: params,
        data: {
          ...data,

          candidacyPhoto: data.candidacyPhoto
            ? {
                connect: data.candidacyPhoto,
              }
            : undefined,

          candidateProfile: data.candidateProfile
            ? {
                connect: data.candidateProfile,
              }
            : undefined,

          voteEvent: data.voteEvent
            ? {
                connect: data.voteEvent,
              }
            : undefined,

          votes: data.votes
            ? {
                connect: data.votes,
              }
            : undefined,
        },
        select: {
          candidacyPhoto: {
            select: {
              id: true,
            },
          },

          candidateBio: true,
          candidateName: true,

          candidateProfile: {
            select: {
              id: true,
            },
          },

          candidateUsername: true,
          createdAt: true,
          dateCreated: true,
          id: true,
          updatedAt: true,

          voteEvent: {
            select: {
              id: true,
            },
          },

          votes: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VoteEventCandidate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteVoteEventCandidate(
    @common.Param() params: VoteEventCandidateWhereUniqueInput
  ): Promise<VoteEventCandidate | null> {
    try {
      return await this.service.deleteVoteEventCandidate({
        where: params,
        select: {
          candidacyPhoto: {
            select: {
              id: true,
            },
          },

          candidateBio: true,
          candidateName: true,

          candidateProfile: {
            select: {
              id: true,
            },
          },

          candidateUsername: true,
          createdAt: true,
          dateCreated: true,
          id: true,
          updatedAt: true,

          voteEvent: {
            select: {
              id: true,
            },
          },

          votes: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/media")
  @ApiNestedQuery(MediaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Media",
    action: "read",
    possession: "any",
  })
  async findMedia(
    @common.Req() request: Request,
    @common.Param() params: VoteEventCandidateWhereUniqueInput
  ): Promise<Media[]> {
    const query = plainToClass(MediaFindManyArgs, request.query);
    const results = await this.service.findMedia(params.id, {
      ...query,
      select: {
        comment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateCreated: true,
        duration: true,

        event: {
          select: {
            id: true,
          },
        },

        height: true,
        id: true,

        message: {
          select: {
            id: true,
          },
        },

        meta: true,
        metaType: true,

        post: {
          select: {
            id: true,
          },
        },

        thumbnail: true,
        typeField: true,
        updatedAt: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },

        voteEvent: {
          select: {
            id: true,
          },
        },

        voteEventCandidate: {
          select: {
            id: true,
          },
        },

        voteEventCandidateMedia: {
          select: {
            id: true,
          },
        },

        width: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/media")
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "update",
    possession: "any",
  })
  async connectMedia(
    @common.Param() params: VoteEventCandidateWhereUniqueInput,
    @common.Body() body: MediaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      media: {
        connect: body,
      },
    };
    await this.service.updateVoteEventCandidate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/media")
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "update",
    possession: "any",
  })
  async updateMedia(
    @common.Param() params: VoteEventCandidateWhereUniqueInput,
    @common.Body() body: MediaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      media: {
        set: body,
      },
    };
    await this.service.updateVoteEventCandidate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/media")
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "update",
    possession: "any",
  })
  async disconnectMedia(
    @common.Param() params: VoteEventCandidateWhereUniqueInput,
    @common.Body() body: MediaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      media: {
        disconnect: body,
      },
    };
    await this.service.updateVoteEventCandidate({
      where: params,
      data,
      select: { id: true },
    });
  }
}
