/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { VoteEventCandidate } from "./VoteEventCandidate";
import { VoteEventCandidateCountArgs } from "./VoteEventCandidateCountArgs";
import { VoteEventCandidateFindManyArgs } from "./VoteEventCandidateFindManyArgs";
import { VoteEventCandidateFindUniqueArgs } from "./VoteEventCandidateFindUniqueArgs";
import { CreateVoteEventCandidateArgs } from "./CreateVoteEventCandidateArgs";
import { UpdateVoteEventCandidateArgs } from "./UpdateVoteEventCandidateArgs";
import { DeleteVoteEventCandidateArgs } from "./DeleteVoteEventCandidateArgs";
import { MediaFindManyArgs } from "../../media/base/MediaFindManyArgs";
import { Media } from "../../media/base/Media";
import { User } from "../../user/base/User";
import { VoteEvent } from "../../voteEvent/base/VoteEvent";
import { Vote } from "../../vote/base/Vote";
import { VoteEventCandidateService } from "../voteEventCandidate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VoteEventCandidate)
export class VoteEventCandidateResolverBase {
  constructor(
    protected readonly service: VoteEventCandidateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "read",
    possession: "any",
  })
  async _voteEventCandidatesMeta(
    @graphql.Args() args: VoteEventCandidateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VoteEventCandidate])
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "read",
    possession: "any",
  })
  async voteEventCandidates(
    @graphql.Args() args: VoteEventCandidateFindManyArgs
  ): Promise<VoteEventCandidate[]> {
    return this.service.voteEventCandidates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VoteEventCandidate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "read",
    possession: "own",
  })
  async voteEventCandidate(
    @graphql.Args() args: VoteEventCandidateFindUniqueArgs
  ): Promise<VoteEventCandidate | null> {
    const result = await this.service.voteEventCandidate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VoteEventCandidate)
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "create",
    possession: "any",
  })
  async createVoteEventCandidate(
    @graphql.Args() args: CreateVoteEventCandidateArgs
  ): Promise<VoteEventCandidate> {
    return await this.service.createVoteEventCandidate({
      ...args,
      data: {
        ...args.data,

        candidacyPhoto: args.data.candidacyPhoto
          ? {
              connect: args.data.candidacyPhoto,
            }
          : undefined,

        candidateProfile: args.data.candidateProfile
          ? {
              connect: args.data.candidateProfile,
            }
          : undefined,

        voteEvent: args.data.voteEvent
          ? {
              connect: args.data.voteEvent,
            }
          : undefined,

        votes: args.data.votes
          ? {
              connect: args.data.votes,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VoteEventCandidate)
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "update",
    possession: "any",
  })
  async updateVoteEventCandidate(
    @graphql.Args() args: UpdateVoteEventCandidateArgs
  ): Promise<VoteEventCandidate | null> {
    try {
      return await this.service.updateVoteEventCandidate({
        ...args,
        data: {
          ...args.data,

          candidacyPhoto: args.data.candidacyPhoto
            ? {
                connect: args.data.candidacyPhoto,
              }
            : undefined,

          candidateProfile: args.data.candidateProfile
            ? {
                connect: args.data.candidateProfile,
              }
            : undefined,

          voteEvent: args.data.voteEvent
            ? {
                connect: args.data.voteEvent,
              }
            : undefined,

          votes: args.data.votes
            ? {
                connect: args.data.votes,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VoteEventCandidate)
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "delete",
    possession: "any",
  })
  async deleteVoteEventCandidate(
    @graphql.Args() args: DeleteVoteEventCandidateArgs
  ): Promise<VoteEventCandidate | null> {
    try {
      return await this.service.deleteVoteEventCandidate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Media], { name: "media" })
  @nestAccessControl.UseRoles({
    resource: "Media",
    action: "read",
    possession: "any",
  })
  async findMedia(
    @graphql.Parent() parent: VoteEventCandidate,
    @graphql.Args() args: MediaFindManyArgs
  ): Promise<Media[]> {
    const results = await this.service.findMedia(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Media, {
    nullable: true,
    name: "candidacyPhoto",
  })
  @nestAccessControl.UseRoles({
    resource: "Media",
    action: "read",
    possession: "any",
  })
  async getCandidacyPhoto(
    @graphql.Parent() parent: VoteEventCandidate
  ): Promise<Media | null> {
    const result = await this.service.getCandidacyPhoto(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "candidateProfile",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getCandidateProfile(
    @graphql.Parent() parent: VoteEventCandidate
  ): Promise<User | null> {
    const result = await this.service.getCandidateProfile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => VoteEvent, {
    nullable: true,
    name: "voteEvent",
  })
  @nestAccessControl.UseRoles({
    resource: "VoteEvent",
    action: "read",
    possession: "any",
  })
  async getVoteEvent(
    @graphql.Parent() parent: VoteEventCandidate
  ): Promise<VoteEvent | null> {
    const result = await this.service.getVoteEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Vote, {
    nullable: true,
    name: "votes",
  })
  @nestAccessControl.UseRoles({
    resource: "Vote",
    action: "read",
    possession: "any",
  })
  async getVotes(
    @graphql.Parent() parent: VoteEventCandidate
  ): Promise<Vote | null> {
    const result = await this.service.getVotes(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
