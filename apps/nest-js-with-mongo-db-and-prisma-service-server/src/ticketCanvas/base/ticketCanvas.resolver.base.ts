/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TicketCanvas } from "./TicketCanvas";
import { TicketCanvasCountArgs } from "./TicketCanvasCountArgs";
import { TicketCanvasFindManyArgs } from "./TicketCanvasFindManyArgs";
import { TicketCanvasFindUniqueArgs } from "./TicketCanvasFindUniqueArgs";
import { CreateTicketCanvasArgs } from "./CreateTicketCanvasArgs";
import { UpdateTicketCanvasArgs } from "./UpdateTicketCanvasArgs";
import { DeleteTicketCanvasArgs } from "./DeleteTicketCanvasArgs";
import { User } from "../../user/base/User";
import { TicketCanvasService } from "../ticketCanvas.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TicketCanvas)
export class TicketCanvasResolverBase {
  constructor(
    protected readonly service: TicketCanvasService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TicketCanvas",
    action: "read",
    possession: "any",
  })
  async _ticketCanvasItemsMeta(
    @graphql.Args() args: TicketCanvasCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TicketCanvas])
  @nestAccessControl.UseRoles({
    resource: "TicketCanvas",
    action: "read",
    possession: "any",
  })
  async ticketCanvasItems(
    @graphql.Args() args: TicketCanvasFindManyArgs
  ): Promise<TicketCanvas[]> {
    return this.service.ticketCanvasItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TicketCanvas, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TicketCanvas",
    action: "read",
    possession: "own",
  })
  async ticketCanvas(
    @graphql.Args() args: TicketCanvasFindUniqueArgs
  ): Promise<TicketCanvas | null> {
    const result = await this.service.ticketCanvas(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TicketCanvas)
  @nestAccessControl.UseRoles({
    resource: "TicketCanvas",
    action: "create",
    possession: "any",
  })
  async createTicketCanvas(
    @graphql.Args() args: CreateTicketCanvasArgs
  ): Promise<TicketCanvas> {
    return await this.service.createTicketCanvas({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TicketCanvas)
  @nestAccessControl.UseRoles({
    resource: "TicketCanvas",
    action: "update",
    possession: "any",
  })
  async updateTicketCanvas(
    @graphql.Args() args: UpdateTicketCanvasArgs
  ): Promise<TicketCanvas | null> {
    try {
      return await this.service.updateTicketCanvas({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TicketCanvas)
  @nestAccessControl.UseRoles({
    resource: "TicketCanvas",
    action: "delete",
    possession: "any",
  })
  async deleteTicketCanvas(
    @graphql.Args() args: DeleteTicketCanvasArgs
  ): Promise<TicketCanvas | null> {
    try {
      return await this.service.deleteTicketCanvas(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: TicketCanvas): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
