/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PollingService } from "../polling.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PollingCreateInput } from "./PollingCreateInput";
import { Polling } from "./Polling";
import { Post } from "../../post/base/Post";
import { PollingFindManyArgs } from "./PollingFindManyArgs";
import { PollingWhereUniqueInput } from "./PollingWhereUniqueInput";
import { PollingUpdateInput } from "./PollingUpdateInput";
import { PollOptionFindManyArgs } from "../../pollOption/base/PollOptionFindManyArgs";
import { PollOption } from "../../pollOption/base/PollOption";
import { PollOptionWhereUniqueInput } from "../../pollOption/base/PollOptionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PollingControllerBase {
  constructor(
    protected readonly service: PollingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Polling })
  @nestAccessControl.UseRoles({
    resource: "Polling",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPolling(
    @common.Body() data: PollingCreateInput
  ): Promise<Polling> {
    return await this.service.createPolling({
      data: {
        ...data,

        post: data.post
          ? {
              connect: data.post,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        dateCreated: true,
        endDate: true,
        id: true,
        isActive: true,
        meta: true,

        post: {
          select: {
            id: true,
          },
        },

        startDate: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Polling] })
  @ApiNestedQuery(PollingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Polling",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async pollings(@common.Req() request: Request): Promise<Polling[]> {
    const args = plainToClass(PollingFindManyArgs, request.query);
    return this.service.pollings({
      ...args,
      select: {
        createdAt: true,
        dateCreated: true,
        endDate: true,
        id: true,
        isActive: true,
        meta: true,

        post: {
          select: {
            id: true,
          },
        },

        startDate: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Polling })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Polling",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async polling(
    @common.Param() params: PollingWhereUniqueInput
  ): Promise<Polling | null> {
    const result = await this.service.polling({
      where: params,
      select: {
        createdAt: true,
        dateCreated: true,
        endDate: true,
        id: true,
        isActive: true,
        meta: true,

        post: {
          select: {
            id: true,
          },
        },

        startDate: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Polling })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Polling",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePolling(
    @common.Param() params: PollingWhereUniqueInput,
    @common.Body() data: PollingUpdateInput
  ): Promise<Polling | null> {
    try {
      return await this.service.updatePolling({
        where: params,
        data: {
          ...data,

          post: data.post
            ? {
                connect: data.post,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          dateCreated: true,
          endDate: true,
          id: true,
          isActive: true,
          meta: true,

          post: {
            select: {
              id: true,
            },
          },

          startDate: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Polling })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Polling",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePolling(
    @common.Param() params: PollingWhereUniqueInput
  ): Promise<Polling | null> {
    try {
      return await this.service.deletePolling({
        where: params,
        select: {
          createdAt: true,
          dateCreated: true,
          endDate: true,
          id: true,
          isActive: true,
          meta: true,

          post: {
            select: {
              id: true,
            },
          },

          startDate: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/pollOptions")
  @ApiNestedQuery(PollOptionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PollOption",
    action: "read",
    possession: "any",
  })
  async findPollOptions(
    @common.Req() request: Request,
    @common.Param() params: PollingWhereUniqueInput
  ): Promise<PollOption[]> {
    const query = plainToClass(PollOptionFindManyArgs, request.query);
    const results = await this.service.findPollOptions(params.id, {
      ...query,
      select: {
        createdAt: true,
        dateCreated: true,
        id: true,

        polling: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pollOptions")
  @nestAccessControl.UseRoles({
    resource: "Polling",
    action: "update",
    possession: "any",
  })
  async connectPollOptions(
    @common.Param() params: PollingWhereUniqueInput,
    @common.Body() body: PollOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pollOptions: {
        connect: body,
      },
    };
    await this.service.updatePolling({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pollOptions")
  @nestAccessControl.UseRoles({
    resource: "Polling",
    action: "update",
    possession: "any",
  })
  async updatePollOptions(
    @common.Param() params: PollingWhereUniqueInput,
    @common.Body() body: PollOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pollOptions: {
        set: body,
      },
    };
    await this.service.updatePolling({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pollOptions")
  @nestAccessControl.UseRoles({
    resource: "Polling",
    action: "update",
    possession: "any",
  })
  async disconnectPollOptions(
    @common.Param() params: PollingWhereUniqueInput,
    @common.Body() body: PollOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pollOptions: {
        disconnect: body,
      },
    };
    await this.service.updatePolling({
      where: params,
      data,
      select: { id: true },
    });
  }
}
