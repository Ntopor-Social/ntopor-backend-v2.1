/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Polling as PrismaPolling,
  PollOption as PrismaPollOption,
  Post as PrismaPost,
} from "@prisma/client";

export class PollingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PollingCountArgs, "select">): Promise<number> {
    return this.prisma.polling.count(args);
  }

  async pollings(args: Prisma.PollingFindManyArgs): Promise<PrismaPolling[]> {
    return this.prisma.polling.findMany(args);
  }
  async polling(
    args: Prisma.PollingFindUniqueArgs
  ): Promise<PrismaPolling | null> {
    return this.prisma.polling.findUnique(args);
  }
  async createPolling(args: Prisma.PollingCreateArgs): Promise<PrismaPolling> {
    return this.prisma.polling.create(args);
  }
  async updatePolling(args: Prisma.PollingUpdateArgs): Promise<PrismaPolling> {
    return this.prisma.polling.update(args);
  }
  async deletePolling(args: Prisma.PollingDeleteArgs): Promise<PrismaPolling> {
    return this.prisma.polling.delete(args);
  }

  async findPollOptions(
    parentId: string,
    args: Prisma.PollOptionFindManyArgs
  ): Promise<PrismaPollOption[]> {
    return this.prisma.polling
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .pollOptions(args);
  }

  async getPost(parentId: string): Promise<PrismaPost | null> {
    return this.prisma.polling
      .findUnique({
        where: { id: parentId },
      })
      .post();
  }
}
