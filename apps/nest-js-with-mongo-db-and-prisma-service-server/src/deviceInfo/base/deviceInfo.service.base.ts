/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DeviceInfo as PrismaDeviceInfo,
  User as PrismaUser,
} from "@prisma/client";

export class DeviceInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeviceInfoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.deviceInfo.count(args);
  }

  async deviceInfos(
    args: Prisma.DeviceInfoFindManyArgs
  ): Promise<PrismaDeviceInfo[]> {
    return this.prisma.deviceInfo.findMany(args);
  }
  async deviceInfo(
    args: Prisma.DeviceInfoFindUniqueArgs
  ): Promise<PrismaDeviceInfo | null> {
    return this.prisma.deviceInfo.findUnique(args);
  }
  async createDeviceInfo(
    args: Prisma.DeviceInfoCreateArgs
  ): Promise<PrismaDeviceInfo> {
    return this.prisma.deviceInfo.create(args);
  }
  async updateDeviceInfo(
    args: Prisma.DeviceInfoUpdateArgs
  ): Promise<PrismaDeviceInfo> {
    return this.prisma.deviceInfo.update(args);
  }
  async deleteDeviceInfo(
    args: Prisma.DeviceInfoDeleteArgs
  ): Promise<PrismaDeviceInfo> {
    return this.prisma.deviceInfo.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.deviceInfo
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
