/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Withdraw as PrismaWithdraw } from "@prisma/client";

export class WithdrawServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WithdrawCountArgs, "select">): Promise<number> {
    return this.prisma.withdraw.count(args);
  }

  async withdraws(
    args: Prisma.WithdrawFindManyArgs
  ): Promise<PrismaWithdraw[]> {
    return this.prisma.withdraw.findMany(args);
  }
  async withdraw(
    args: Prisma.WithdrawFindUniqueArgs
  ): Promise<PrismaWithdraw | null> {
    return this.prisma.withdraw.findUnique(args);
  }
  async createWithdraw(
    args: Prisma.WithdrawCreateArgs
  ): Promise<PrismaWithdraw> {
    return this.prisma.withdraw.create(args);
  }
  async updateWithdraw(
    args: Prisma.WithdrawUpdateArgs
  ): Promise<PrismaWithdraw> {
    return this.prisma.withdraw.update(args);
  }
  async deleteWithdraw(
    args: Prisma.WithdrawDeleteArgs
  ): Promise<PrismaWithdraw> {
    return this.prisma.withdraw.delete(args);
  }
}
