/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  ValidateNested,
  IsDate,
  IsEnum,
  IsBoolean,
} from "class-validator";
import { VoteEventCandidateUpdateManyWithoutUsersInput } from "./VoteEventCandidateUpdateManyWithoutUsersInput";
import { Type } from "class-transformer";
import { CommentUpdateManyWithoutUsersInput } from "./CommentUpdateManyWithoutUsersInput";
import { DeviceInfoUpdateManyWithoutUsersInput } from "./DeviceInfoUpdateManyWithoutUsersInput";
import { EnumUserDevices } from "./EnumUserDevices";
import { VoteWhereUniqueInput } from "../../vote/base/VoteWhereUniqueInput";
import { EventUpdateManyWithoutUsersInput } from "./EventUpdateManyWithoutUsersInput";
import { TicketUpdateManyWithoutUsersInput } from "./TicketUpdateManyWithoutUsersInput";
import { LikeUpdateManyWithoutUsersInput } from "./LikeUpdateManyWithoutUsersInput";
import { LocationUpdateManyWithoutUsersInput } from "./LocationUpdateManyWithoutUsersInput";
import { MediaUpdateManyWithoutUsersInput } from "./MediaUpdateManyWithoutUsersInput";
import { NotificationUpdateManyWithoutUsersInput } from "./NotificationUpdateManyWithoutUsersInput";
import { PollUpdateManyWithoutUsersInput } from "./PollUpdateManyWithoutUsersInput";
import { PostUpdateManyWithoutUsersInput } from "./PostUpdateManyWithoutUsersInput";
import { MessageUpdateManyWithoutUsersInput } from "./MessageUpdateManyWithoutUsersInput";
import { ReportUpdateManyWithoutUsersInput } from "./ReportUpdateManyWithoutUsersInput";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { ShareUpdateManyWithoutUsersInput } from "./ShareUpdateManyWithoutUsersInput";
import { TicketCanvasUpdateManyWithoutUsersInput } from "./TicketCanvasUpdateManyWithoutUsersInput";
import { VoteEventUpdateManyWithoutUsersInput } from "./VoteEventUpdateManyWithoutUsersInput";

@InputType()
class UserUpdateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  accountVerification?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bio?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  blocked?: string | null;

  @ApiProperty({
    required: false,
    type: () => VoteEventCandidateUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => VoteEventCandidateUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => VoteEventCandidateUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  candidateProfiles?: VoteEventCandidateUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => CommentUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => CommentUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => CommentUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  comments?: CommentUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateCreated?: Date | null;

  @ApiProperty({
    required: false,
    type: () => DeviceInfoUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => DeviceInfoUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => DeviceInfoUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  deviceInfos?: DeviceInfoUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    enum: EnumUserDevices,
    isArray: true,
  })
  @IsEnum(EnumUserDevices, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumUserDevices], {
    nullable: true,
  })
  devices?: Array<"Option1">;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dob?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  enterpriseLocation?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  enterpriseName?: string | null;

  @ApiProperty({
    required: false,
    type: () => VoteWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => VoteWhereUniqueInput)
  @IsOptional()
  @Field(() => VoteWhereUniqueInput, {
    nullable: true,
  })
  eventVotes?: VoteWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => EventUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => EventUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => EventUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  events?: EventUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: () => TicketUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TicketUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TicketUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  groupTickets?: TicketUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isAccountActive?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isAdmin?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isAppleAuth?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isBlocked?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isEmailVerified?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isGoogleAuth?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isPhoneVerified?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isVerified?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  language?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
    type: () => LikeUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => LikeUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => LikeUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  likes?: LikeUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => LocationUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => LocationUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => LocationUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  locations?: LocationUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => MediaUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => MediaUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => MediaUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  mediaItems?: MediaUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
    type: () => NotificationUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => NotificationUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => NotificationUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  notifications?: NotificationUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  otp?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  password?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  passwordhash?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phone?: string | null;

  @ApiProperty({
    required: false,
    type: () => PollUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => PollUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => PollUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  polls?: PollUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => PostUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => PostUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => PostUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  posts?: PostUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => MessageUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => MessageUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => MessageUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  receivedMessages?: MessageUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => ReportUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ReportUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ReportUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  reports?: ReportUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  roles?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: () => MessageUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => MessageUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => MessageUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  sentMessages?: MessageUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => ShareUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ShareUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ShareUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  shares?: ShareUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => TicketCanvasUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TicketCanvasUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TicketCanvasUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  ticketCanvasItems?: TicketCanvasUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => TicketUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TicketUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TicketUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  tickets?: TicketUpdateManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  username?: string;

  @ApiProperty({
    required: false,
    type: () => VoteEventUpdateManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => VoteEventUpdateManyWithoutUsersInput)
  @IsOptional()
  @Field(() => VoteEventUpdateManyWithoutUsersInput, {
    nullable: true,
  })
  voteEvents?: VoteEventUpdateManyWithoutUsersInput;
}

export { UserUpdateInput as UserUpdateInput };
