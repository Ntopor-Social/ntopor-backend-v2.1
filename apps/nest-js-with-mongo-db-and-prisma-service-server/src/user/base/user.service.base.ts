/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  User as PrismaUser,
  VoteEventCandidate as PrismaVoteEventCandidate,
  Comment as PrismaComment,
  DeviceInfo as PrismaDeviceInfo,
  Event as PrismaEvent,
  Ticket as PrismaTicket,
  Like as PrismaLike,
  Location as PrismaLocation,
  Media as PrismaMedia,
  Notification as PrismaNotification,
  Poll as PrismaPoll,
  Post as PrismaPost,
  Message as PrismaMessage,
  Report as PrismaReport,
  Share as PrismaShare,
  TicketCanvas as PrismaTicketCanvas,
  VoteEvent as PrismaVoteEvent,
  Vote as PrismaVote,
} from "@prisma/client";

export class UserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UserCountArgs, "select">): Promise<number> {
    return this.prisma.user.count(args);
  }

  async users(args: Prisma.UserFindManyArgs): Promise<PrismaUser[]> {
    return this.prisma.user.findMany(args);
  }
  async user(args: Prisma.UserFindUniqueArgs): Promise<PrismaUser | null> {
    return this.prisma.user.findUnique(args);
  }
  async createUser(args: Prisma.UserCreateArgs): Promise<PrismaUser> {
    return this.prisma.user.create(args);
  }
  async updateUser(args: Prisma.UserUpdateArgs): Promise<PrismaUser> {
    return this.prisma.user.update(args);
  }
  async deleteUser(args: Prisma.UserDeleteArgs): Promise<PrismaUser> {
    return this.prisma.user.delete(args);
  }

  async findCandidateProfiles(
    parentId: string,
    args: Prisma.VoteEventCandidateFindManyArgs
  ): Promise<PrismaVoteEventCandidate[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .candidateProfiles(args);
  }

  async findComments(
    parentId: string,
    args: Prisma.CommentFindManyArgs
  ): Promise<PrismaComment[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comments(args);
  }

  async findDeviceInfos(
    parentId: string,
    args: Prisma.DeviceInfoFindManyArgs
  ): Promise<PrismaDeviceInfo[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .deviceInfos(args);
  }

  async findEvents(
    parentId: string,
    args: Prisma.EventFindManyArgs
  ): Promise<PrismaEvent[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .events(args);
  }

  async findGroupTickets(
    parentId: string,
    args: Prisma.TicketFindManyArgs
  ): Promise<PrismaTicket[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .groupTickets(args);
  }

  async findLikes(
    parentId: string,
    args: Prisma.LikeFindManyArgs
  ): Promise<PrismaLike[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .likes(args);
  }

  async findLocations(
    parentId: string,
    args: Prisma.LocationFindManyArgs
  ): Promise<PrismaLocation[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .locations(args);
  }

  async findMediaItems(
    parentId: string,
    args: Prisma.MediaFindManyArgs
  ): Promise<PrismaMedia[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .mediaItems(args);
  }

  async findNotifications(
    parentId: string,
    args: Prisma.NotificationFindManyArgs
  ): Promise<PrismaNotification[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .notifications(args);
  }

  async findPolls(
    parentId: string,
    args: Prisma.PollFindManyArgs
  ): Promise<PrismaPoll[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .polls(args);
  }

  async findPosts(
    parentId: string,
    args: Prisma.PostFindManyArgs
  ): Promise<PrismaPost[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .posts(args);
  }

  async findReceivedMessages(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<PrismaMessage[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .receivedMessages(args);
  }

  async findReports(
    parentId: string,
    args: Prisma.ReportFindManyArgs
  ): Promise<PrismaReport[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reports(args);
  }

  async findSentMessages(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<PrismaMessage[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sentMessages(args);
  }

  async findShares(
    parentId: string,
    args: Prisma.ShareFindManyArgs
  ): Promise<PrismaShare[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .shares(args);
  }

  async findTicketCanvasItems(
    parentId: string,
    args: Prisma.TicketCanvasFindManyArgs
  ): Promise<PrismaTicketCanvas[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ticketCanvasItems(args);
  }

  async findTickets(
    parentId: string,
    args: Prisma.TicketFindManyArgs
  ): Promise<PrismaTicket[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tickets(args);
  }

  async findVoteEvents(
    parentId: string,
    args: Prisma.VoteEventFindManyArgs
  ): Promise<PrismaVoteEvent[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .voteEvents(args);
  }

  async getEventVotes(parentId: string): Promise<PrismaVote | null> {
    return this.prisma.user
      .findUnique({
        where: { id: parentId },
      })
      .eventVotes();
  }
}
