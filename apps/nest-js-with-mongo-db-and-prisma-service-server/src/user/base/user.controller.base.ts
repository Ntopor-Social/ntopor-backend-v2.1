/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserService } from "../user.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { Post } from "../../post/base/Post";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { VoteEventCandidateFindManyArgs } from "../../voteEventCandidate/base/VoteEventCandidateFindManyArgs";
import { VoteEventCandidate } from "../../voteEventCandidate/base/VoteEventCandidate";
import { VoteEventCandidateWhereUniqueInput } from "../../voteEventCandidate/base/VoteEventCandidateWhereUniqueInput";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { CommentWhereUniqueInput } from "../../comment/base/CommentWhereUniqueInput";
import { DeviceInfoFindManyArgs } from "../../deviceInfo/base/DeviceInfoFindManyArgs";
import { DeviceInfo } from "../../deviceInfo/base/DeviceInfo";
import { DeviceInfoWhereUniqueInput } from "../../deviceInfo/base/DeviceInfoWhereUniqueInput";
import { EventFindManyArgs } from "../../event/base/EventFindManyArgs";
import { Event } from "../../event/base/Event";
import { EventWhereUniqueInput } from "../../event/base/EventWhereUniqueInput";
import { TicketFindManyArgs } from "../../ticket/base/TicketFindManyArgs";
import { Ticket } from "../../ticket/base/Ticket";
import { TicketWhereUniqueInput } from "../../ticket/base/TicketWhereUniqueInput";
import { LikeFindManyArgs } from "../../like/base/LikeFindManyArgs";
import { Like } from "../../like/base/Like";
import { LikeWhereUniqueInput } from "../../like/base/LikeWhereUniqueInput";
import { LocationFindManyArgs } from "../../location/base/LocationFindManyArgs";
import { Location } from "../../location/base/Location";
import { LocationWhereUniqueInput } from "../../location/base/LocationWhereUniqueInput";
import { MediaFindManyArgs } from "../../media/base/MediaFindManyArgs";
import { Media } from "../../media/base/Media";
import { MediaWhereUniqueInput } from "../../media/base/MediaWhereUniqueInput";
import { NotificationFindManyArgs } from "../../notification/base/NotificationFindManyArgs";
import { Notification } from "../../notification/base/Notification";
import { NotificationWhereUniqueInput } from "../../notification/base/NotificationWhereUniqueInput";
import { PollFindManyArgs } from "../../poll/base/PollFindManyArgs";
import { Poll } from "../../poll/base/Poll";
import { PollWhereUniqueInput } from "../../poll/base/PollWhereUniqueInput";
import { PostFindManyArgs } from "../../post/base/PostFindManyArgs";
import { PostWhereUniqueInput } from "../../post/base/PostWhereUniqueInput";
import { MessageFindManyArgs } from "../../message/base/MessageFindManyArgs";
import { Message } from "../../message/base/Message";
import { MessageWhereUniqueInput } from "../../message/base/MessageWhereUniqueInput";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { ReportWhereUniqueInput } from "../../report/base/ReportWhereUniqueInput";
import { ShareFindManyArgs } from "../../share/base/ShareFindManyArgs";
import { Share } from "../../share/base/Share";
import { ShareWhereUniqueInput } from "../../share/base/ShareWhereUniqueInput";
import { TicketCanvasFindManyArgs } from "../../ticketCanvas/base/TicketCanvasFindManyArgs";
import { TicketCanvas } from "../../ticketCanvas/base/TicketCanvas";
import { TicketCanvasWhereUniqueInput } from "../../ticketCanvas/base/TicketCanvasWhereUniqueInput";
import { VoteEventFindManyArgs } from "../../voteEvent/base/VoteEventFindManyArgs";
import { VoteEvent } from "../../voteEvent/base/VoteEvent";
import { VoteEventWhereUniqueInput } from "../../voteEvent/base/VoteEventWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: {
        ...data,

        eventVotes: data.eventVotes
          ? {
              connect: data.eventVotes,
            }
          : undefined,
      },
      select: {
        accountVerification: true,
        bio: true,
        blocked: true,
        createdAt: true,
        dateCreated: true,
        devices: true,
        dob: true,
        email: true,
        enterpriseLocation: true,
        enterpriseName: true,

        eventVotes: {
          select: {
            id: true,
          },
        },

        firstName: true,
        id: true,
        isAccountActive: true,
        isAdmin: true,
        isAppleAuth: true,
        isBlocked: true,
        isEmailVerified: true,
        isGoogleAuth: true,
        isPhoneVerified: true,
        isVerified: true,
        language: true,
        lastName: true,
        name: true,
        otp: true,
        passwordhash: true,
        phone: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        accountVerification: true,
        bio: true,
        blocked: true,
        createdAt: true,
        dateCreated: true,
        devices: true,
        dob: true,
        email: true,
        enterpriseLocation: true,
        enterpriseName: true,

        eventVotes: {
          select: {
            id: true,
          },
        },

        firstName: true,
        id: true,
        isAccountActive: true,
        isAdmin: true,
        isAppleAuth: true,
        isBlocked: true,
        isEmailVerified: true,
        isGoogleAuth: true,
        isPhoneVerified: true,
        isVerified: true,
        language: true,
        lastName: true,
        name: true,
        otp: true,
        passwordhash: true,
        phone: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        accountVerification: true,
        bio: true,
        blocked: true,
        createdAt: true,
        dateCreated: true,
        devices: true,
        dob: true,
        email: true,
        enterpriseLocation: true,
        enterpriseName: true,

        eventVotes: {
          select: {
            id: true,
          },
        },

        firstName: true,
        id: true,
        isAccountActive: true,
        isAdmin: true,
        isAppleAuth: true,
        isBlocked: true,
        isEmailVerified: true,
        isGoogleAuth: true,
        isPhoneVerified: true,
        isVerified: true,
        language: true,
        lastName: true,
        name: true,
        otp: true,
        passwordhash: true,
        phone: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: {
          ...data,

          eventVotes: data.eventVotes
            ? {
                connect: data.eventVotes,
              }
            : undefined,
        },
        select: {
          accountVerification: true,
          bio: true,
          blocked: true,
          createdAt: true,
          dateCreated: true,
          devices: true,
          dob: true,
          email: true,
          enterpriseLocation: true,
          enterpriseName: true,

          eventVotes: {
            select: {
              id: true,
            },
          },

          firstName: true,
          id: true,
          isAccountActive: true,
          isAdmin: true,
          isAppleAuth: true,
          isBlocked: true,
          isEmailVerified: true,
          isGoogleAuth: true,
          isPhoneVerified: true,
          isVerified: true,
          language: true,
          lastName: true,
          name: true,
          otp: true,
          passwordhash: true,
          phone: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          accountVerification: true,
          bio: true,
          blocked: true,
          createdAt: true,
          dateCreated: true,
          devices: true,
          dob: true,
          email: true,
          enterpriseLocation: true,
          enterpriseName: true,

          eventVotes: {
            select: {
              id: true,
            },
          },

          firstName: true,
          id: true,
          isAccountActive: true,
          isAdmin: true,
          isAppleAuth: true,
          isBlocked: true,
          isEmailVerified: true,
          isGoogleAuth: true,
          isPhoneVerified: true,
          isVerified: true,
          language: true,
          lastName: true,
          name: true,
          otp: true,
          passwordhash: true,
          phone: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/candidateProfiles")
  @ApiNestedQuery(VoteEventCandidateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "read",
    possession: "any",
  })
  async findCandidateProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<VoteEventCandidate[]> {
    const query = plainToClass(VoteEventCandidateFindManyArgs, request.query);
    const results = await this.service.findCandidateProfiles(params.id, {
      ...query,
      select: {
        candidacyPhoto: {
          select: {
            id: true,
          },
        },

        candidateBio: true,
        candidateName: true,

        candidateProfile: {
          select: {
            id: true,
          },
        },

        candidateUsername: true,
        createdAt: true,
        dateCreated: true,
        id: true,
        updatedAt: true,

        voteEvent: {
          select: {
            id: true,
          },
        },

        votes: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/candidateProfiles")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectCandidateProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: VoteEventCandidateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateProfiles: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/candidateProfiles")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateCandidateProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: VoteEventCandidateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateProfiles: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/candidateProfiles")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectCandidateProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: VoteEventCandidateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      candidateProfiles: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/comments")
  @ApiNestedQuery(CommentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Comment",
    action: "read",
    possession: "any",
  })
  async findComments(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Comment[]> {
    const query = plainToClass(CommentFindManyArgs, request.query);
    const results = await this.service.findComments(params.id, {
      ...query,
      select: {
        commentContent: true,
        createdAt: true,
        date: true,
        hashtags: true,
        id: true,
        isMedia: true,
        meta: true,
        metaType: true,

        post: {
          select: {
            id: true,
          },
        },

        tagged: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/comments")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectComments(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/comments")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateComments(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/comments")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectComments(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/deviceInfos")
  @ApiNestedQuery(DeviceInfoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DeviceInfo",
    action: "read",
    possession: "any",
  })
  async findDeviceInfos(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<DeviceInfo[]> {
    const query = plainToClass(DeviceInfoFindManyArgs, request.query);
    const results = await this.service.findDeviceInfos(params.id, {
      ...query,
      select: {
        appVersion: true,
        createdAt: true,
        deviceLanguage: true,
        deviceMemory: true,
        deviceModel: true,
        deviceType: true,
        deviceVersion: true,
        expoToken: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/deviceInfos")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectDeviceInfos(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DeviceInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deviceInfos: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/deviceInfos")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateDeviceInfos(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DeviceInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deviceInfos: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/deviceInfos")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectDeviceInfos(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DeviceInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deviceInfos: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/events")
  @ApiNestedQuery(EventFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Event",
    action: "read",
    possession: "any",
  })
  async findEvents(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Event[]> {
    const query = plainToClass(EventFindManyArgs, request.query);
    const results = await this.service.findEvents(params.id, {
      ...query,
      select: {
        accumulated: true,
        balance: true,
        createdAt: true,
        dateCreated: true,
        eventBio: true,
        eventDate: true,
        eventLink: true,
        eventLocation: true,
        eventName: true,
        eventPriceType: true,
        eventType: true,
        featuredImage: true,
        galerry: true,
        gallery: true,
        id: true,
        isActive: true,
        isFeatured: true,
        isPrivate: true,
        isTicketAvailable: true,

        organizer: {
          select: {
            id: true,
          },
        },

        ticketAvailableCount: true,
        ticketCount: true,
        ticketsSold: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/events")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectEvents(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      events: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/events")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateEvents(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      events: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/events")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectEvents(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: EventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      events: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/groupTickets")
  @ApiNestedQuery(TicketFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "read",
    possession: "any",
  })
  async findGroupTickets(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Ticket[]> {
    const query = plainToClass(TicketFindManyArgs, request.query);
    const results = await this.service.findGroupTickets(params.id, {
      ...query,
      select: {
        boughtBy: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateCreated: true,

        event: {
          select: {
            id: true,
          },
        },

        eventDateTime: true,
        id: true,
        isTicketActive: true,
        ticketOwnersMeta: true,

        ticketType: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/groupTickets")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectGroupTickets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupTickets: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/groupTickets")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateGroupTickets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupTickets: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/groupTickets")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectGroupTickets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupTickets: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/likes")
  @ApiNestedQuery(LikeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Like",
    action: "read",
    possession: "any",
  })
  async findLikes(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Like[]> {
    const query = plainToClass(LikeFindManyArgs, request.query);
    const results = await this.service.findLikes(params.id, {
      ...query,
      select: {
        comment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateCreated: true,
        id: true,
        meta: true,

        post: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/likes")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectLikes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likes: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/likes")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateLikes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likes: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/likes")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectLikes(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likes: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/locations")
  @ApiNestedQuery(LocationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Location",
    action: "read",
    possession: "any",
  })
  async findLocations(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Location[]> {
    const query = plainToClass(LocationFindManyArgs, request.query);
    const results = await this.service.findLocations(params.id, {
      ...query,
      select: {
        city: true,
        country: true,
        createdAt: true,
        dateCreated: true,
        id: true,
        lat: true,
        lng: true,
        meta: true,
        metaType: true,
        place: true,
        state: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        zip: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/locations")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectLocations(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      locations: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/locations")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateLocations(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      locations: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/locations")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectLocations(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      locations: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/mediaItems")
  @ApiNestedQuery(MediaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Media",
    action: "read",
    possession: "any",
  })
  async findMediaItems(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Media[]> {
    const query = plainToClass(MediaFindManyArgs, request.query);
    const results = await this.service.findMediaItems(params.id, {
      ...query,
      select: {
        comment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateCreated: true,
        duration: true,

        event: {
          select: {
            id: true,
          },
        },

        height: true,
        id: true,

        message: {
          select: {
            id: true,
          },
        },

        meta: true,
        metaType: true,

        post: {
          select: {
            id: true,
          },
        },

        thumbnail: true,
        typeField: true,
        updatedAt: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },

        voteEvent: {
          select: {
            id: true,
          },
        },

        voteEventCandidate: {
          select: {
            id: true,
          },
        },

        voteEventCandidateMedia: {
          select: {
            id: true,
          },
        },

        width: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mediaItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectMediaItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MediaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mediaItems: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mediaItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateMediaItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MediaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mediaItems: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mediaItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectMediaItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MediaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mediaItems: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/notifications")
  @ApiNestedQuery(NotificationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Notification",
    action: "read",
    possession: "any",
  })
  async findNotifications(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Notification[]> {
    const query = plainToClass(NotificationFindManyArgs, request.query);
    const results = await this.service.findNotifications(params.id, {
      ...query,
      select: {
        actionRequired: true,
        content: true,
        createdAt: true,
        dateCreated: true,
        id: true,
        isViewed: true,
        metaType: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/notifications")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectNotifications(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/notifications")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateNotifications(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/notifications")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectNotifications(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/polls")
  @ApiNestedQuery(PollFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Poll",
    action: "read",
    possession: "any",
  })
  async findPolls(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Poll[]> {
    const query = plainToClass(PollFindManyArgs, request.query);
    const results = await this.service.findPolls(params.id, {
      ...query,
      select: {
        createdAt: true,
        currency: true,
        dateCreated: true,
        id: true,
        packageDescription: true,
        packageName: true,
        packageSize: true,

        pollOption: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        voter: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/polls")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectPolls(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      polls: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/polls")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updatePolls(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      polls: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/polls")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectPolls(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PollWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      polls: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/posts")
  @ApiNestedQuery(PostFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "read",
    possession: "any",
  })
  async findPosts(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Post[]> {
    const query = plainToClass(PostFindManyArgs, request.query);
    const results = await this.service.findPosts(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,
        hashtags: true,
        id: true,
        isBlocked: true,
        isEvent: true,
        isMedia: true,
        isPolling: true,
        isPromoted: true,
        isVoteEvent: true,
        linkedEvent: true,
        linkedEventType: true,

        location: {
          select: {
            id: true,
          },
        },

        mentioned: true,
        postDescription: true,
        postType: true,
        tagged: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/posts")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectPosts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      posts: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/posts")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updatePosts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      posts: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/posts")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectPosts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      posts: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/receivedMessages")
  @ApiNestedQuery(MessageFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "any",
  })
  async findReceivedMessages(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Message[]> {
    const query = plainToClass(MessageFindManyArgs, request.query);
    const results = await this.service.findReceivedMessages(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,
        isDeleted: true,
        isRead: true,
        isReceived: true,

        receiver: {
          select: {
            id: true,
          },
        },

        sender: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/receivedMessages")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectReceivedMessages(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      receivedMessages: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/receivedMessages")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateReceivedMessages(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      receivedMessages: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/receivedMessages")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectReceivedMessages(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      receivedMessages: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/reports")
  @ApiNestedQuery(ReportFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Report",
    action: "read",
    possession: "any",
  })
  async findReports(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Report[]> {
    const query = plainToClass(ReportFindManyArgs, request.query);
    const results = await this.service.findReports(params.id, {
      ...query,
      select: {
        comment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateCreated: true,
        id: true,
        meta: true,

        post: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reports")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectReports(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reports")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateReports(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reports")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectReports(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/sentMessages")
  @ApiNestedQuery(MessageFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "any",
  })
  async findSentMessages(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Message[]> {
    const query = plainToClass(MessageFindManyArgs, request.query);
    const results = await this.service.findSentMessages(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,
        isDeleted: true,
        isRead: true,
        isReceived: true,

        receiver: {
          select: {
            id: true,
          },
        },

        sender: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sentMessages")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectSentMessages(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sentMessages: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sentMessages")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateSentMessages(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sentMessages: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sentMessages")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectSentMessages(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sentMessages: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/shares")
  @ApiNestedQuery(ShareFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Share",
    action: "read",
    possession: "any",
  })
  async findShares(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Share[]> {
    const query = plainToClass(ShareFindManyArgs, request.query);
    const results = await this.service.findShares(params.id, {
      ...query,
      select: {
        comment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateCreated: true,
        id: true,

        post: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/shares")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectShares(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ShareWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shares: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/shares")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateShares(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ShareWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shares: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/shares")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectShares(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ShareWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shares: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/ticketCanvasItems")
  @ApiNestedQuery(TicketCanvasFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TicketCanvas",
    action: "read",
    possession: "any",
  })
  async findTicketCanvasItems(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<TicketCanvas[]> {
    const query = plainToClass(TicketCanvasFindManyArgs, request.query);
    const results = await this.service.findTicketCanvasItems(params.id, {
      ...query,
      select: {
        canvasType: true,
        createdAt: true,
        currency: true,
        dateCreated: true,
        id: true,
        price: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ticketCanvasItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectTicketCanvasItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TicketCanvasWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ticketCanvasItems: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ticketCanvasItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateTicketCanvasItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TicketCanvasWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ticketCanvasItems: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ticketCanvasItems")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectTicketCanvasItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TicketCanvasWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ticketCanvasItems: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/tickets")
  @ApiNestedQuery(TicketFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "read",
    possession: "any",
  })
  async findTickets(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Ticket[]> {
    const query = plainToClass(TicketFindManyArgs, request.query);
    const results = await this.service.findTickets(params.id, {
      ...query,
      select: {
        boughtBy: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateCreated: true,

        event: {
          select: {
            id: true,
          },
        },

        eventDateTime: true,
        id: true,
        isTicketActive: true,
        ticketOwnersMeta: true,

        ticketType: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tickets")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectTickets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tickets: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tickets")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateTickets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tickets: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tickets")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectTickets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tickets: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/voteEvents")
  @ApiNestedQuery(VoteEventFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "VoteEvent",
    action: "read",
    possession: "any",
  })
  async findVoteEvents(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<VoteEvent[]> {
    const query = plainToClass(VoteEventFindManyArgs, request.query);
    const results = await this.service.findVoteEvents(params.id, {
      ...query,
      select: {
        accumulated: true,
        balance: true,
        createdAt: true,
        currency: true,
        dateCreated: true,
        endDate: true,
        eventBio: true,
        eventLink: true,
        eventName: true,
        eventPriceType: true,
        gallery: true,
        id: true,
        isFeatured: true,
        isPrivate: true,

        organizer: {
          select: {
            id: true,
          },
        },

        startDate: true,
        ticketsSold: true,
        updatedAt: true,
        voteLimit: true,
        votePrice: true,
        votesAvailable: true,
        votesPerUser: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/voteEvents")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectVoteEvents(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: VoteEventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      voteEvents: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/voteEvents")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateVoteEvents(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: VoteEventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      voteEvents: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/voteEvents")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectVoteEvents(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: VoteEventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      voteEvents: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
