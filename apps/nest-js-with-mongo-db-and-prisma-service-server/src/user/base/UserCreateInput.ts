/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  ValidateNested,
  IsDate,
  IsEnum,
  IsBoolean,
} from "class-validator";
import { VoteEventCandidateCreateNestedManyWithoutUsersInput } from "./VoteEventCandidateCreateNestedManyWithoutUsersInput";
import { Type } from "class-transformer";
import { CommentCreateNestedManyWithoutUsersInput } from "./CommentCreateNestedManyWithoutUsersInput";
import { DeviceInfoCreateNestedManyWithoutUsersInput } from "./DeviceInfoCreateNestedManyWithoutUsersInput";
import { EnumUserDevices } from "./EnumUserDevices";
import { VoteWhereUniqueInput } from "../../vote/base/VoteWhereUniqueInput";
import { EventCreateNestedManyWithoutUsersInput } from "./EventCreateNestedManyWithoutUsersInput";
import { TicketCreateNestedManyWithoutUsersInput } from "./TicketCreateNestedManyWithoutUsersInput";
import { LikeCreateNestedManyWithoutUsersInput } from "./LikeCreateNestedManyWithoutUsersInput";
import { LocationCreateNestedManyWithoutUsersInput } from "./LocationCreateNestedManyWithoutUsersInput";
import { MediaCreateNestedManyWithoutUsersInput } from "./MediaCreateNestedManyWithoutUsersInput";
import { NotificationCreateNestedManyWithoutUsersInput } from "./NotificationCreateNestedManyWithoutUsersInput";
import { PollCreateNestedManyWithoutUsersInput } from "./PollCreateNestedManyWithoutUsersInput";
import { PostCreateNestedManyWithoutUsersInput } from "./PostCreateNestedManyWithoutUsersInput";
import { MessageCreateNestedManyWithoutUsersInput } from "./MessageCreateNestedManyWithoutUsersInput";
import { ReportCreateNestedManyWithoutUsersInput } from "./ReportCreateNestedManyWithoutUsersInput";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { ShareCreateNestedManyWithoutUsersInput } from "./ShareCreateNestedManyWithoutUsersInput";
import { TicketCanvasCreateNestedManyWithoutUsersInput } from "./TicketCanvasCreateNestedManyWithoutUsersInput";
import { VoteEventCreateNestedManyWithoutUsersInput } from "./VoteEventCreateNestedManyWithoutUsersInput";

@InputType()
class UserCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  accountVerification?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bio?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  blocked?: string | null;

  @ApiProperty({
    required: false,
    type: () => VoteEventCandidateCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => VoteEventCandidateCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => VoteEventCandidateCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  candidateProfiles?: VoteEventCandidateCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => CommentCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => CommentCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => CommentCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  comments?: CommentCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateCreated?: Date | null;

  @ApiProperty({
    required: false,
    type: () => DeviceInfoCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => DeviceInfoCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => DeviceInfoCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  deviceInfos?: DeviceInfoCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    enum: EnumUserDevices,
    isArray: true,
  })
  @IsEnum(EnumUserDevices, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumUserDevices], {
    nullable: true,
  })
  devices?: Array<"Option1">;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dob?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  enterpriseLocation?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  enterpriseName?: string | null;

  @ApiProperty({
    required: false,
    type: () => VoteWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => VoteWhereUniqueInput)
  @IsOptional()
  @Field(() => VoteWhereUniqueInput, {
    nullable: true,
  })
  eventVotes?: VoteWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => EventCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => EventCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => EventCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  events?: EventCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: () => TicketCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TicketCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TicketCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  groupTickets?: TicketCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isAccountActive?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isAdmin?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isAppleAuth?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isBlocked?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isEmailVerified?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isGoogleAuth?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isPhoneVerified?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isVerified?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  language?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
    type: () => LikeCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => LikeCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => LikeCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  likes?: LikeCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => LocationCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => LocationCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => LocationCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  locations?: LocationCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => MediaCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => MediaCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => MediaCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  mediaItems?: MediaCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
    type: () => NotificationCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => NotificationCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => NotificationCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  notifications?: NotificationCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  otp?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  password!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  passwordhash?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phone?: string | null;

  @ApiProperty({
    required: false,
    type: () => PollCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => PollCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => PollCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  polls?: PollCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => PostCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => PostCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => PostCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  posts?: PostCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => MessageCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => MessageCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => MessageCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  receivedMessages?: MessageCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => ReportCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ReportCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ReportCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  reports?: ReportCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: true,
  })
  @IsJSONValue()
  @Field(() => GraphQLJSON)
  roles!: InputJsonValue;

  @ApiProperty({
    required: false,
    type: () => MessageCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => MessageCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => MessageCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  sentMessages?: MessageCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => ShareCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ShareCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ShareCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  shares?: ShareCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => TicketCanvasCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TicketCanvasCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TicketCanvasCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  ticketCanvasItems?: TicketCanvasCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => TicketCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => TicketCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => TicketCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  tickets?: TicketCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  username!: string;

  @ApiProperty({
    required: false,
    type: () => VoteEventCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => VoteEventCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => VoteEventCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  voteEvents?: VoteEventCreateNestedManyWithoutUsersInput;
}

export { UserCreateInput as UserCreateInput };
