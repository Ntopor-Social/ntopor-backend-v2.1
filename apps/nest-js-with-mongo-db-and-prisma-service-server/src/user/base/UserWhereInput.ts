/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested } from "class-validator";
import { VoteEventCandidateListRelationFilter } from "../../voteEventCandidate/base/VoteEventCandidateListRelationFilter";
import { CommentListRelationFilter } from "../../comment/base/CommentListRelationFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { DeviceInfoListRelationFilter } from "../../deviceInfo/base/DeviceInfoListRelationFilter";
import { VoteWhereUniqueInput } from "../../vote/base/VoteWhereUniqueInput";
import { EventListRelationFilter } from "../../event/base/EventListRelationFilter";
import { TicketListRelationFilter } from "../../ticket/base/TicketListRelationFilter";
import { StringFilter } from "../../util/StringFilter";
import { BooleanNullableFilter } from "../../util/BooleanNullableFilter";
import { LikeListRelationFilter } from "../../like/base/LikeListRelationFilter";
import { LocationListRelationFilter } from "../../location/base/LocationListRelationFilter";
import { MediaListRelationFilter } from "../../media/base/MediaListRelationFilter";
import { NotificationListRelationFilter } from "../../notification/base/NotificationListRelationFilter";
import { PollListRelationFilter } from "../../poll/base/PollListRelationFilter";
import { PostListRelationFilter } from "../../post/base/PostListRelationFilter";
import { MessageListRelationFilter } from "../../message/base/MessageListRelationFilter";
import { ReportListRelationFilter } from "../../report/base/ReportListRelationFilter";
import { ShareListRelationFilter } from "../../share/base/ShareListRelationFilter";
import { TicketCanvasListRelationFilter } from "../../ticketCanvas/base/TicketCanvasListRelationFilter";
import { VoteEventListRelationFilter } from "../../voteEvent/base/VoteEventListRelationFilter";

@InputType()
class UserWhereInput {
  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  accountVerification?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  bio?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  blocked?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => VoteEventCandidateListRelationFilter,
  })
  @ValidateNested()
  @Type(() => VoteEventCandidateListRelationFilter)
  @IsOptional()
  @Field(() => VoteEventCandidateListRelationFilter, {
    nullable: true,
  })
  candidateProfiles?: VoteEventCandidateListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => CommentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CommentListRelationFilter)
  @IsOptional()
  @Field(() => CommentListRelationFilter, {
    nullable: true,
  })
  comments?: CommentListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  dateCreated?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => DeviceInfoListRelationFilter,
  })
  @ValidateNested()
  @Type(() => DeviceInfoListRelationFilter)
  @IsOptional()
  @Field(() => DeviceInfoListRelationFilter, {
    nullable: true,
  })
  deviceInfos?: DeviceInfoListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  dob?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  email?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  enterpriseLocation?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  enterpriseName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => VoteWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => VoteWhereUniqueInput)
  @IsOptional()
  @Field(() => VoteWhereUniqueInput, {
    nullable: true,
  })
  eventVotes?: VoteWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => EventListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EventListRelationFilter)
  @IsOptional()
  @Field(() => EventListRelationFilter, {
    nullable: true,
  })
  events?: EventListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  firstName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => TicketListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TicketListRelationFilter)
  @IsOptional()
  @Field(() => TicketListRelationFilter, {
    nullable: true,
  })
  groupTickets?: TicketListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isAccountActive?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isAdmin?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isAppleAuth?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isBlocked?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isEmailVerified?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isGoogleAuth?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isPhoneVerified?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isVerified?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  language?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  lastName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => LikeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => LikeListRelationFilter)
  @IsOptional()
  @Field(() => LikeListRelationFilter, {
    nullable: true,
  })
  likes?: LikeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => LocationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => LocationListRelationFilter)
  @IsOptional()
  @Field(() => LocationListRelationFilter, {
    nullable: true,
  })
  locations?: LocationListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => MediaListRelationFilter,
  })
  @ValidateNested()
  @Type(() => MediaListRelationFilter)
  @IsOptional()
  @Field(() => MediaListRelationFilter, {
    nullable: true,
  })
  mediaItems?: MediaListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  name?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => NotificationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => NotificationListRelationFilter)
  @IsOptional()
  @Field(() => NotificationListRelationFilter, {
    nullable: true,
  })
  notifications?: NotificationListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  otp?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  passwordhash?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  phone?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => PollListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PollListRelationFilter)
  @IsOptional()
  @Field(() => PollListRelationFilter, {
    nullable: true,
  })
  polls?: PollListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => PostListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PostListRelationFilter)
  @IsOptional()
  @Field(() => PostListRelationFilter, {
    nullable: true,
  })
  posts?: PostListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => MessageListRelationFilter,
  })
  @ValidateNested()
  @Type(() => MessageListRelationFilter)
  @IsOptional()
  @Field(() => MessageListRelationFilter, {
    nullable: true,
  })
  receivedMessages?: MessageListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ReportListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ReportListRelationFilter)
  @IsOptional()
  @Field(() => ReportListRelationFilter, {
    nullable: true,
  })
  reports?: ReportListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => MessageListRelationFilter,
  })
  @ValidateNested()
  @Type(() => MessageListRelationFilter)
  @IsOptional()
  @Field(() => MessageListRelationFilter, {
    nullable: true,
  })
  sentMessages?: MessageListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ShareListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ShareListRelationFilter)
  @IsOptional()
  @Field(() => ShareListRelationFilter, {
    nullable: true,
  })
  shares?: ShareListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TicketCanvasListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TicketCanvasListRelationFilter)
  @IsOptional()
  @Field(() => TicketCanvasListRelationFilter, {
    nullable: true,
  })
  ticketCanvasItems?: TicketCanvasListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TicketListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TicketListRelationFilter)
  @IsOptional()
  @Field(() => TicketListRelationFilter, {
    nullable: true,
  })
  tickets?: TicketListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  username?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => VoteEventListRelationFilter,
  })
  @ValidateNested()
  @Type(() => VoteEventListRelationFilter)
  @IsOptional()
  @Field(() => VoteEventListRelationFilter, {
    nullable: true,
  })
  voteEvents?: VoteEventListRelationFilter;
}

export { UserWhereInput as UserWhereInput };
