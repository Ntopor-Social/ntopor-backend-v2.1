/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TicketService } from "../ticket.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TicketCreateInput } from "./TicketCreateInput";
import { Ticket } from "./Ticket";
import { Post } from "../../post/base/Post";
import { TicketFindManyArgs } from "./TicketFindManyArgs";
import { TicketWhereUniqueInput } from "./TicketWhereUniqueInput";
import { TicketUpdateInput } from "./TicketUpdateInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TicketControllerBase {
  constructor(
    protected readonly service: TicketService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ticket })
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTicket(@common.Body() data: TicketCreateInput): Promise<Ticket> {
    return await this.service.createTicket({
      data: {
        ...data,

        boughtBy: data.boughtBy
          ? {
              connect: data.boughtBy,
            }
          : undefined,

        event: data.event
          ? {
              connect: data.event,
            }
          : undefined,

        ticketType: data.ticketType
          ? {
              connect: data.ticketType,
            }
          : undefined,
      },
      select: {
        boughtBy: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateCreated: true,

        event: {
          select: {
            id: true,
          },
        },

        eventDateTime: true,
        id: true,
        isTicketActive: true,
        ticketOwnersMeta: true,

        ticketType: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Ticket] })
  @ApiNestedQuery(TicketFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async tickets(@common.Req() request: Request): Promise<Ticket[]> {
    const args = plainToClass(TicketFindManyArgs, request.query);
    return this.service.tickets({
      ...args,
      select: {
        boughtBy: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateCreated: true,

        event: {
          select: {
            id: true,
          },
        },

        eventDateTime: true,
        id: true,
        isTicketActive: true,
        ticketOwnersMeta: true,

        ticketType: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ticket })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ticket(
    @common.Param() params: TicketWhereUniqueInput
  ): Promise<Ticket | null> {
    const result = await this.service.ticket({
      where: params,
      select: {
        boughtBy: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateCreated: true,

        event: {
          select: {
            id: true,
          },
        },

        eventDateTime: true,
        id: true,
        isTicketActive: true,
        ticketOwnersMeta: true,

        ticketType: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ticket })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTicket(
    @common.Param() params: TicketWhereUniqueInput,
    @common.Body() data: TicketUpdateInput
  ): Promise<Ticket | null> {
    try {
      return await this.service.updateTicket({
        where: params,
        data: {
          ...data,

          boughtBy: data.boughtBy
            ? {
                connect: data.boughtBy,
              }
            : undefined,

          event: data.event
            ? {
                connect: data.event,
              }
            : undefined,

          ticketType: data.ticketType
            ? {
                connect: data.ticketType,
              }
            : undefined,
        },
        select: {
          boughtBy: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          dateCreated: true,

          event: {
            select: {
              id: true,
            },
          },

          eventDateTime: true,
          id: true,
          isTicketActive: true,
          ticketOwnersMeta: true,

          ticketType: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ticket })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTicket(
    @common.Param() params: TicketWhereUniqueInput
  ): Promise<Ticket | null> {
    try {
      return await this.service.deleteTicket({
        where: params,
        select: {
          boughtBy: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          dateCreated: true,

          event: {
            select: {
              id: true,
            },
          },

          eventDateTime: true,
          id: true,
          isTicketActive: true,
          ticketOwnersMeta: true,

          ticketType: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/ticketOwners")
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findTicketOwners(
    @common.Req() request: Request,
    @common.Param() params: TicketWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findTicketOwners(params.id, {
      ...query,
      select: {
        accountVerification: true,
        bio: true,
        blocked: true,
        createdAt: true,
        dateCreated: true,
        devices: true,
        dob: true,
        email: true,
        enterpriseLocation: true,
        enterpriseName: true,

        eventVotes: {
          select: {
            id: true,
          },
        },

        firstName: true,
        id: true,
        isAccountActive: true,
        isAdmin: true,
        isAppleAuth: true,
        isBlocked: true,
        isEmailVerified: true,
        isGoogleAuth: true,
        isPhoneVerified: true,
        isVerified: true,
        language: true,
        lastName: true,
        name: true,
        otp: true,
        passwordhash: true,
        phone: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ticketOwners")
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "update",
    possession: "any",
  })
  async connectTicketOwners(
    @common.Param() params: TicketWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ticketOwners: {
        connect: body,
      },
    };
    await this.service.updateTicket({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ticketOwners")
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "update",
    possession: "any",
  })
  async updateTicketOwners(
    @common.Param() params: TicketWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ticketOwners: {
        set: body,
      },
    };
    await this.service.updateTicket({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ticketOwners")
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "update",
    possession: "any",
  })
  async disconnectTicketOwners(
    @common.Param() params: TicketWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ticketOwners: {
        disconnect: body,
      },
    };
    await this.service.updateTicket({
      where: params,
      data,
      select: { id: true },
    });
  }
}
