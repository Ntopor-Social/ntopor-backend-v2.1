/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PostService } from "../post.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PostCreateInput } from "./PostCreateInput";
import { Post } from "./Post";
import { PostFindManyArgs } from "./PostFindManyArgs";
import { PostWhereUniqueInput } from "./PostWhereUniqueInput";
import { PostUpdateInput } from "./PostUpdateInput";
import { CommentFindManyArgs } from "../../comment/base/CommentFindManyArgs";
import { Comment } from "../../comment/base/Comment";
import { CommentWhereUniqueInput } from "../../comment/base/CommentWhereUniqueInput";
import { LikeFindManyArgs } from "../../like/base/LikeFindManyArgs";
import { Like } from "../../like/base/Like";
import { LikeWhereUniqueInput } from "../../like/base/LikeWhereUniqueInput";
import { MediaFindManyArgs } from "../../media/base/MediaFindManyArgs";
import { Media } from "../../media/base/Media";
import { MediaWhereUniqueInput } from "../../media/base/MediaWhereUniqueInput";
import { PollingFindManyArgs } from "../../polling/base/PollingFindManyArgs";
import { Polling } from "../../polling/base/Polling";
import { PollingWhereUniqueInput } from "../../polling/base/PollingWhereUniqueInput";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { ReportWhereUniqueInput } from "../../report/base/ReportWhereUniqueInput";
import { ShareFindManyArgs } from "../../share/base/ShareFindManyArgs";
import { Share } from "../../share/base/Share";
import { ShareWhereUniqueInput } from "../../share/base/ShareWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PostControllerBase {
  constructor(
    protected readonly service: PostService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Post })
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPost(@common.Body() data: PostCreateInput): Promise<Post> {
    return await this.service.createPost({
      data: {
        ...data,

        location: data.location
          ? {
              connect: data.location,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        date: true,
        hashtags: true,
        id: true,
        isBlocked: true,
        isEvent: true,
        isMedia: true,
        isPolling: true,
        isPromoted: true,
        isVoteEvent: true,
        linkedEvent: true,
        linkedEventType: true,

        location: {
          select: {
            id: true,
          },
        },

        mentioned: true,
        postDescription: true,
        postType: true,
        tagged: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Post] })
  @ApiNestedQuery(PostFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async posts(@common.Req() request: Request): Promise<Post[]> {
    const args = plainToClass(PostFindManyArgs, request.query);
    return this.service.posts({
      ...args,
      select: {
        createdAt: true,
        date: true,
        hashtags: true,
        id: true,
        isBlocked: true,
        isEvent: true,
        isMedia: true,
        isPolling: true,
        isPromoted: true,
        isVoteEvent: true,
        linkedEvent: true,
        linkedEventType: true,

        location: {
          select: {
            id: true,
          },
        },

        mentioned: true,
        postDescription: true,
        postType: true,
        tagged: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Post })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async post(
    @common.Param() params: PostWhereUniqueInput
  ): Promise<Post | null> {
    const result = await this.service.post({
      where: params,
      select: {
        createdAt: true,
        date: true,
        hashtags: true,
        id: true,
        isBlocked: true,
        isEvent: true,
        isMedia: true,
        isPolling: true,
        isPromoted: true,
        isVoteEvent: true,
        linkedEvent: true,
        linkedEventType: true,

        location: {
          select: {
            id: true,
          },
        },

        mentioned: true,
        postDescription: true,
        postType: true,
        tagged: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Post })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePost(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() data: PostUpdateInput
  ): Promise<Post | null> {
    try {
      return await this.service.updatePost({
        where: params,
        data: {
          ...data,

          location: data.location
            ? {
                connect: data.location,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          date: true,
          hashtags: true,
          id: true,
          isBlocked: true,
          isEvent: true,
          isMedia: true,
          isPolling: true,
          isPromoted: true,
          isVoteEvent: true,
          linkedEvent: true,
          linkedEventType: true,

          location: {
            select: {
              id: true,
            },
          },

          mentioned: true,
          postDescription: true,
          postType: true,
          tagged: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Post })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePost(
    @common.Param() params: PostWhereUniqueInput
  ): Promise<Post | null> {
    try {
      return await this.service.deletePost({
        where: params,
        select: {
          createdAt: true,
          date: true,
          hashtags: true,
          id: true,
          isBlocked: true,
          isEvent: true,
          isMedia: true,
          isPolling: true,
          isPromoted: true,
          isVoteEvent: true,
          linkedEvent: true,
          linkedEventType: true,

          location: {
            select: {
              id: true,
            },
          },

          mentioned: true,
          postDescription: true,
          postType: true,
          tagged: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/comments")
  @ApiNestedQuery(CommentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Comment",
    action: "read",
    possession: "any",
  })
  async findComments(
    @common.Req() request: Request,
    @common.Param() params: PostWhereUniqueInput
  ): Promise<Comment[]> {
    const query = plainToClass(CommentFindManyArgs, request.query);
    const results = await this.service.findComments(params.id, {
      ...query,
      select: {
        commentContent: true,
        createdAt: true,
        date: true,
        hashtags: true,
        id: true,
        isMedia: true,
        meta: true,
        metaType: true,

        post: {
          select: {
            id: true,
          },
        },

        tagged: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/comments")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async connectComments(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        connect: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/comments")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async updateComments(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        set: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/comments")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async disconnectComments(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: CommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comments: {
        disconnect: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/likes")
  @ApiNestedQuery(LikeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Like",
    action: "read",
    possession: "any",
  })
  async findLikes(
    @common.Req() request: Request,
    @common.Param() params: PostWhereUniqueInput
  ): Promise<Like[]> {
    const query = plainToClass(LikeFindManyArgs, request.query);
    const results = await this.service.findLikes(params.id, {
      ...query,
      select: {
        comment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateCreated: true,
        id: true,
        meta: true,

        post: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/likes")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async connectLikes(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: LikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likes: {
        connect: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/likes")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async updateLikes(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: LikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likes: {
        set: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/likes")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async disconnectLikes(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: LikeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likes: {
        disconnect: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/mediaItems")
  @ApiNestedQuery(MediaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Media",
    action: "read",
    possession: "any",
  })
  async findMediaItems(
    @common.Req() request: Request,
    @common.Param() params: PostWhereUniqueInput
  ): Promise<Media[]> {
    const query = plainToClass(MediaFindManyArgs, request.query);
    const results = await this.service.findMediaItems(params.id, {
      ...query,
      select: {
        comment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateCreated: true,
        duration: true,

        event: {
          select: {
            id: true,
          },
        },

        height: true,
        id: true,

        message: {
          select: {
            id: true,
          },
        },

        meta: true,
        metaType: true,

        post: {
          select: {
            id: true,
          },
        },

        thumbnail: true,
        typeField: true,
        updatedAt: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },

        voteEvent: {
          select: {
            id: true,
          },
        },

        voteEventCandidate: {
          select: {
            id: true,
          },
        },

        voteEventCandidateMedia: {
          select: {
            id: true,
          },
        },

        width: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mediaItems")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async connectMediaItems(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: MediaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mediaItems: {
        connect: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mediaItems")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async updateMediaItems(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: MediaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mediaItems: {
        set: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mediaItems")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async disconnectMediaItems(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: MediaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mediaItems: {
        disconnect: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/pollings")
  @ApiNestedQuery(PollingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Polling",
    action: "read",
    possession: "any",
  })
  async findPollings(
    @common.Req() request: Request,
    @common.Param() params: PostWhereUniqueInput
  ): Promise<Polling[]> {
    const query = plainToClass(PollingFindManyArgs, request.query);
    const results = await this.service.findPollings(params.id, {
      ...query,
      select: {
        createdAt: true,
        dateCreated: true,
        endDate: true,
        id: true,
        isActive: true,
        meta: true,

        post: {
          select: {
            id: true,
          },
        },

        startDate: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pollings")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async connectPollings(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: PollingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pollings: {
        connect: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pollings")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async updatePollings(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: PollingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pollings: {
        set: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pollings")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async disconnectPollings(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: PollingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pollings: {
        disconnect: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/reports")
  @ApiNestedQuery(ReportFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Report",
    action: "read",
    possession: "any",
  })
  async findReports(
    @common.Req() request: Request,
    @common.Param() params: PostWhereUniqueInput
  ): Promise<Report[]> {
    const query = plainToClass(ReportFindManyArgs, request.query);
    const results = await this.service.findReports(params.id, {
      ...query,
      select: {
        comment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateCreated: true,
        id: true,
        meta: true,

        post: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reports")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async connectReports(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        connect: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reports")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async updateReports(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        set: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reports")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async disconnectReports(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        disconnect: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/shares")
  @ApiNestedQuery(ShareFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Share",
    action: "read",
    possession: "any",
  })
  async findShares(
    @common.Req() request: Request,
    @common.Param() params: PostWhereUniqueInput
  ): Promise<Share[]> {
    const query = plainToClass(ShareFindManyArgs, request.query);
    const results = await this.service.findShares(params.id, {
      ...query,
      select: {
        comment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateCreated: true,
        id: true,

        post: {
          select: {
            id: true,
          },
        },

        typeField: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/shares")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async connectShares(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: ShareWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shares: {
        connect: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/shares")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async updateShares(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: ShareWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shares: {
        set: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/shares")
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "update",
    possession: "any",
  })
  async disconnectShares(
    @common.Param() params: PostWhereUniqueInput,
    @common.Body() body: ShareWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shares: {
        disconnect: body,
      },
    };
    await this.service.updatePost({
      where: params,
      data,
      select: { id: true },
    });
  }
}
