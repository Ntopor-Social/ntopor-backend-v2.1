/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { CommentCreateNestedManyWithoutPostsInput } from "./CommentCreateNestedManyWithoutPostsInput";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  MaxLength,
  IsBoolean,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { LikeCreateNestedManyWithoutPostsInput } from "./LikeCreateNestedManyWithoutPostsInput";
import { EnumPostLinkedEventType } from "./EnumPostLinkedEventType";
import { LocationWhereUniqueInput } from "../../location/base/LocationWhereUniqueInput";
import { MediaCreateNestedManyWithoutPostsInput } from "./MediaCreateNestedManyWithoutPostsInput";
import { PollingCreateNestedManyWithoutPostsInput } from "./PollingCreateNestedManyWithoutPostsInput";
import { ReportCreateNestedManyWithoutPostsInput } from "./ReportCreateNestedManyWithoutPostsInput";
import { ShareCreateNestedManyWithoutPostsInput } from "./ShareCreateNestedManyWithoutPostsInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class PostCreateInput {
  @ApiProperty({
    required: false,
    type: () => CommentCreateNestedManyWithoutPostsInput,
  })
  @ValidateNested()
  @Type(() => CommentCreateNestedManyWithoutPostsInput)
  @IsOptional()
  @Field(() => CommentCreateNestedManyWithoutPostsInput, {
    nullable: true,
  })
  comments?: CommentCreateNestedManyWithoutPostsInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  date?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  hashtags?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isBlocked?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isEvent?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isMedia?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isPolling?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isPromoted?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isVoteEvent?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => LikeCreateNestedManyWithoutPostsInput,
  })
  @ValidateNested()
  @Type(() => LikeCreateNestedManyWithoutPostsInput)
  @IsOptional()
  @Field(() => LikeCreateNestedManyWithoutPostsInput, {
    nullable: true,
  })
  likes?: LikeCreateNestedManyWithoutPostsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  linkedEvent?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumPostLinkedEventType,
  })
  @IsEnum(EnumPostLinkedEventType)
  @IsOptional()
  @Field(() => EnumPostLinkedEventType, {
    nullable: true,
  })
  linkedEventType?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: () => LocationWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => LocationWhereUniqueInput)
  @IsOptional()
  @Field(() => LocationWhereUniqueInput, {
    nullable: true,
  })
  location?: LocationWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => MediaCreateNestedManyWithoutPostsInput,
  })
  @ValidateNested()
  @Type(() => MediaCreateNestedManyWithoutPostsInput)
  @IsOptional()
  @Field(() => MediaCreateNestedManyWithoutPostsInput, {
    nullable: true,
  })
  mediaItems?: MediaCreateNestedManyWithoutPostsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  mentioned?: string | null;

  @ApiProperty({
    required: false,
    type: () => PollingCreateNestedManyWithoutPostsInput,
  })
  @ValidateNested()
  @Type(() => PollingCreateNestedManyWithoutPostsInput)
  @IsOptional()
  @Field(() => PollingCreateNestedManyWithoutPostsInput, {
    nullable: true,
  })
  pollings?: PollingCreateNestedManyWithoutPostsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  postDescription?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  postType?: string | null;

  @ApiProperty({
    required: false,
    type: () => ReportCreateNestedManyWithoutPostsInput,
  })
  @ValidateNested()
  @Type(() => ReportCreateNestedManyWithoutPostsInput)
  @IsOptional()
  @Field(() => ReportCreateNestedManyWithoutPostsInput, {
    nullable: true,
  })
  reports?: ReportCreateNestedManyWithoutPostsInput;

  @ApiProperty({
    required: false,
    type: () => ShareCreateNestedManyWithoutPostsInput,
  })
  @ValidateNested()
  @Type(() => ShareCreateNestedManyWithoutPostsInput)
  @IsOptional()
  @Field(() => ShareCreateNestedManyWithoutPostsInput, {
    nullable: true,
  })
  shares?: ShareCreateNestedManyWithoutPostsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  tagged?: string | null;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput | null;
}

export { PostCreateInput as PostCreateInput };
