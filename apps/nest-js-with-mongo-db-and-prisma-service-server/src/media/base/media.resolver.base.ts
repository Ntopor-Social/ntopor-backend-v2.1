/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Media } from "./Media";
import { MediaCountArgs } from "./MediaCountArgs";
import { MediaFindManyArgs } from "./MediaFindManyArgs";
import { MediaFindUniqueArgs } from "./MediaFindUniqueArgs";
import { CreateMediaArgs } from "./CreateMediaArgs";
import { UpdateMediaArgs } from "./UpdateMediaArgs";
import { DeleteMediaArgs } from "./DeleteMediaArgs";
import { Comment } from "../../comment/base/Comment";
import { Event } from "../../event/base/Event";
import { Message } from "../../message/base/Message";
import { Post } from "../../post/base/Post";
import { User } from "../../user/base/User";
import { VoteEvent } from "../../voteEvent/base/VoteEvent";
import { VoteEventCandidate } from "../../voteEventCandidate/base/VoteEventCandidate";
import { MediaService } from "../media.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Media)
export class MediaResolverBase {
  constructor(
    protected readonly service: MediaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Media",
    action: "read",
    possession: "any",
  })
  async _mediaItemsMeta(
    @graphql.Args() args: MediaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Media])
  @nestAccessControl.UseRoles({
    resource: "Media",
    action: "read",
    possession: "any",
  })
  async mediaItems(@graphql.Args() args: MediaFindManyArgs): Promise<Media[]> {
    return this.service.mediaItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Media, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Media",
    action: "read",
    possession: "own",
  })
  async media(
    @graphql.Args() args: MediaFindUniqueArgs
  ): Promise<Media | null> {
    const result = await this.service.media(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Media)
  @nestAccessControl.UseRoles({
    resource: "Media",
    action: "create",
    possession: "any",
  })
  async createMedia(@graphql.Args() args: CreateMediaArgs): Promise<Media> {
    return await this.service.createMedia({
      ...args,
      data: {
        ...args.data,

        comment: args.data.comment
          ? {
              connect: args.data.comment,
            }
          : undefined,

        event: args.data.event
          ? {
              connect: args.data.event,
            }
          : undefined,

        message: args.data.message
          ? {
              connect: args.data.message,
            }
          : undefined,

        post: args.data.post
          ? {
              connect: args.data.post,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        voteEvent: args.data.voteEvent
          ? {
              connect: args.data.voteEvent,
            }
          : undefined,

        voteEventCandidate: args.data.voteEventCandidate
          ? {
              connect: args.data.voteEventCandidate,
            }
          : undefined,

        voteEventCandidateMedia: args.data.voteEventCandidateMedia
          ? {
              connect: args.data.voteEventCandidateMedia,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Media)
  @nestAccessControl.UseRoles({
    resource: "Media",
    action: "update",
    possession: "any",
  })
  async updateMedia(
    @graphql.Args() args: UpdateMediaArgs
  ): Promise<Media | null> {
    try {
      return await this.service.updateMedia({
        ...args,
        data: {
          ...args.data,

          comment: args.data.comment
            ? {
                connect: args.data.comment,
              }
            : undefined,

          event: args.data.event
            ? {
                connect: args.data.event,
              }
            : undefined,

          message: args.data.message
            ? {
                connect: args.data.message,
              }
            : undefined,

          post: args.data.post
            ? {
                connect: args.data.post,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          voteEvent: args.data.voteEvent
            ? {
                connect: args.data.voteEvent,
              }
            : undefined,

          voteEventCandidate: args.data.voteEventCandidate
            ? {
                connect: args.data.voteEventCandidate,
              }
            : undefined,

          voteEventCandidateMedia: args.data.voteEventCandidateMedia
            ? {
                connect: args.data.voteEventCandidateMedia,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Media)
  @nestAccessControl.UseRoles({
    resource: "Media",
    action: "delete",
    possession: "any",
  })
  async deleteMedia(
    @graphql.Args() args: DeleteMediaArgs
  ): Promise<Media | null> {
    try {
      return await this.service.deleteMedia(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Comment, {
    nullable: true,
    name: "comment",
  })
  @nestAccessControl.UseRoles({
    resource: "Comment",
    action: "read",
    possession: "any",
  })
  async getComment(@graphql.Parent() parent: Media): Promise<Comment | null> {
    const result = await this.service.getComment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Event, {
    nullable: true,
    name: "event",
  })
  @nestAccessControl.UseRoles({
    resource: "Event",
    action: "read",
    possession: "any",
  })
  async getEvent(@graphql.Parent() parent: Media): Promise<Event | null> {
    const result = await this.service.getEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Message, {
    nullable: true,
    name: "message",
  })
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "any",
  })
  async getMessage(@graphql.Parent() parent: Media): Promise<Message | null> {
    const result = await this.service.getMessage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Post, {
    nullable: true,
    name: "post",
  })
  @nestAccessControl.UseRoles({
    resource: "Post",
    action: "read",
    possession: "any",
  })
  async getPost(@graphql.Parent() parent: Media): Promise<Post | null> {
    const result = await this.service.getPost(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Media): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => VoteEvent, {
    nullable: true,
    name: "voteEvent",
  })
  @nestAccessControl.UseRoles({
    resource: "VoteEvent",
    action: "read",
    possession: "any",
  })
  async getVoteEvent(
    @graphql.Parent() parent: Media
  ): Promise<VoteEvent | null> {
    const result = await this.service.getVoteEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => VoteEventCandidate, {
    nullable: true,
    name: "voteEventCandidate",
  })
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "read",
    possession: "any",
  })
  async getVoteEventCandidate(
    @graphql.Parent() parent: Media
  ): Promise<VoteEventCandidate | null> {
    const result = await this.service.getVoteEventCandidate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => VoteEventCandidate, {
    nullable: true,
    name: "voteEventCandidateMedia",
  })
  @nestAccessControl.UseRoles({
    resource: "VoteEventCandidate",
    action: "read",
    possession: "any",
  })
  async getVoteEventCandidateMedia(
    @graphql.Parent() parent: Media
  ): Promise<VoteEventCandidate | null> {
    const result = await this.service.getVoteEventCandidateMedia(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
