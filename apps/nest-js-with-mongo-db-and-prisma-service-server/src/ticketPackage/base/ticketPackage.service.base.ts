/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TicketPackage as PrismaTicketPackage,
  Ticket as PrismaTicket,
  Event as PrismaEvent,
} from "@prisma/client";

export class TicketPackageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TicketPackageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ticketPackage.count(args);
  }

  async ticketPackages(
    args: Prisma.TicketPackageFindManyArgs
  ): Promise<PrismaTicketPackage[]> {
    return this.prisma.ticketPackage.findMany(args);
  }
  async ticketPackage(
    args: Prisma.TicketPackageFindUniqueArgs
  ): Promise<PrismaTicketPackage | null> {
    return this.prisma.ticketPackage.findUnique(args);
  }
  async createTicketPackage(
    args: Prisma.TicketPackageCreateArgs
  ): Promise<PrismaTicketPackage> {
    return this.prisma.ticketPackage.create(args);
  }
  async updateTicketPackage(
    args: Prisma.TicketPackageUpdateArgs
  ): Promise<PrismaTicketPackage> {
    return this.prisma.ticketPackage.update(args);
  }
  async deleteTicketPackage(
    args: Prisma.TicketPackageDeleteArgs
  ): Promise<PrismaTicketPackage> {
    return this.prisma.ticketPackage.delete(args);
  }

  async findTickets(
    parentId: string,
    args: Prisma.TicketFindManyArgs
  ): Promise<PrismaTicket[]> {
    return this.prisma.ticketPackage
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tickets(args);
  }

  async getEvent(parentId: string): Promise<PrismaEvent | null> {
    return this.prisma.ticketPackage
      .findUnique({
        where: { id: parentId },
      })
      .event();
  }
}
