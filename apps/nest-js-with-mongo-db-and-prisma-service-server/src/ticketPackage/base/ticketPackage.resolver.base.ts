/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TicketPackage } from "./TicketPackage";
import { TicketPackageCountArgs } from "./TicketPackageCountArgs";
import { TicketPackageFindManyArgs } from "./TicketPackageFindManyArgs";
import { TicketPackageFindUniqueArgs } from "./TicketPackageFindUniqueArgs";
import { CreateTicketPackageArgs } from "./CreateTicketPackageArgs";
import { UpdateTicketPackageArgs } from "./UpdateTicketPackageArgs";
import { DeleteTicketPackageArgs } from "./DeleteTicketPackageArgs";
import { TicketFindManyArgs } from "../../ticket/base/TicketFindManyArgs";
import { Ticket } from "../../ticket/base/Ticket";
import { Event } from "../../event/base/Event";
import { TicketPackageService } from "../ticketPackage.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TicketPackage)
export class TicketPackageResolverBase {
  constructor(
    protected readonly service: TicketPackageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TicketPackage",
    action: "read",
    possession: "any",
  })
  async _ticketPackagesMeta(
    @graphql.Args() args: TicketPackageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TicketPackage])
  @nestAccessControl.UseRoles({
    resource: "TicketPackage",
    action: "read",
    possession: "any",
  })
  async ticketPackages(
    @graphql.Args() args: TicketPackageFindManyArgs
  ): Promise<TicketPackage[]> {
    return this.service.ticketPackages(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TicketPackage, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TicketPackage",
    action: "read",
    possession: "own",
  })
  async ticketPackage(
    @graphql.Args() args: TicketPackageFindUniqueArgs
  ): Promise<TicketPackage | null> {
    const result = await this.service.ticketPackage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TicketPackage)
  @nestAccessControl.UseRoles({
    resource: "TicketPackage",
    action: "create",
    possession: "any",
  })
  async createTicketPackage(
    @graphql.Args() args: CreateTicketPackageArgs
  ): Promise<TicketPackage> {
    return await this.service.createTicketPackage({
      ...args,
      data: {
        ...args.data,

        event: args.data.event
          ? {
              connect: args.data.event,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TicketPackage)
  @nestAccessControl.UseRoles({
    resource: "TicketPackage",
    action: "update",
    possession: "any",
  })
  async updateTicketPackage(
    @graphql.Args() args: UpdateTicketPackageArgs
  ): Promise<TicketPackage | null> {
    try {
      return await this.service.updateTicketPackage({
        ...args,
        data: {
          ...args.data,

          event: args.data.event
            ? {
                connect: args.data.event,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TicketPackage)
  @nestAccessControl.UseRoles({
    resource: "TicketPackage",
    action: "delete",
    possession: "any",
  })
  async deleteTicketPackage(
    @graphql.Args() args: DeleteTicketPackageArgs
  ): Promise<TicketPackage | null> {
    try {
      return await this.service.deleteTicketPackage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Ticket], { name: "tickets" })
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "read",
    possession: "any",
  })
  async findTickets(
    @graphql.Parent() parent: TicketPackage,
    @graphql.Args() args: TicketFindManyArgs
  ): Promise<Ticket[]> {
    const results = await this.service.findTickets(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Event, {
    nullable: true,
    name: "event",
  })
  @nestAccessControl.UseRoles({
    resource: "Event",
    action: "read",
    possession: "any",
  })
  async getEvent(
    @graphql.Parent() parent: TicketPackage
  ): Promise<Event | null> {
    const result = await this.service.getEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
