/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PollOption } from "./PollOption";
import { PollOptionCountArgs } from "./PollOptionCountArgs";
import { PollOptionFindManyArgs } from "./PollOptionFindManyArgs";
import { PollOptionFindUniqueArgs } from "./PollOptionFindUniqueArgs";
import { CreatePollOptionArgs } from "./CreatePollOptionArgs";
import { UpdatePollOptionArgs } from "./UpdatePollOptionArgs";
import { DeletePollOptionArgs } from "./DeletePollOptionArgs";
import { PollFindManyArgs } from "../../poll/base/PollFindManyArgs";
import { Poll } from "../../poll/base/Poll";
import { Polling } from "../../polling/base/Polling";
import { PollOptionService } from "../pollOption.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PollOption)
export class PollOptionResolverBase {
  constructor(
    protected readonly service: PollOptionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PollOption",
    action: "read",
    possession: "any",
  })
  async _pollOptionsMeta(
    @graphql.Args() args: PollOptionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PollOption])
  @nestAccessControl.UseRoles({
    resource: "PollOption",
    action: "read",
    possession: "any",
  })
  async pollOptions(
    @graphql.Args() args: PollOptionFindManyArgs
  ): Promise<PollOption[]> {
    return this.service.pollOptions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PollOption, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PollOption",
    action: "read",
    possession: "own",
  })
  async pollOption(
    @graphql.Args() args: PollOptionFindUniqueArgs
  ): Promise<PollOption | null> {
    const result = await this.service.pollOption(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PollOption)
  @nestAccessControl.UseRoles({
    resource: "PollOption",
    action: "create",
    possession: "any",
  })
  async createPollOption(
    @graphql.Args() args: CreatePollOptionArgs
  ): Promise<PollOption> {
    return await this.service.createPollOption({
      ...args,
      data: {
        ...args.data,

        polling: args.data.polling
          ? {
              connect: args.data.polling,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PollOption)
  @nestAccessControl.UseRoles({
    resource: "PollOption",
    action: "update",
    possession: "any",
  })
  async updatePollOption(
    @graphql.Args() args: UpdatePollOptionArgs
  ): Promise<PollOption | null> {
    try {
      return await this.service.updatePollOption({
        ...args,
        data: {
          ...args.data,

          polling: args.data.polling
            ? {
                connect: args.data.polling,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PollOption)
  @nestAccessControl.UseRoles({
    resource: "PollOption",
    action: "delete",
    possession: "any",
  })
  async deletePollOption(
    @graphql.Args() args: DeletePollOptionArgs
  ): Promise<PollOption | null> {
    try {
      return await this.service.deletePollOption(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Poll], { name: "polls" })
  @nestAccessControl.UseRoles({
    resource: "Poll",
    action: "read",
    possession: "any",
  })
  async findPolls(
    @graphql.Parent() parent: PollOption,
    @graphql.Args() args: PollFindManyArgs
  ): Promise<Poll[]> {
    const results = await this.service.findPolls(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Polling, {
    nullable: true,
    name: "polling",
  })
  @nestAccessControl.UseRoles({
    resource: "Polling",
    action: "read",
    possession: "any",
  })
  async getPolling(
    @graphql.Parent() parent: PollOption
  ): Promise<Polling | null> {
    const result = await this.service.getPolling(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
