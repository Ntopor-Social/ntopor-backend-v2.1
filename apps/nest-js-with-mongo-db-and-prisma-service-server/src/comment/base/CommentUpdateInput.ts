/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  IsDate,
  IsEnum,
  IsBoolean,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumCommentHashtags } from "./EnumCommentHashtags";
import { LikeUpdateManyWithoutCommentsInput } from "./LikeUpdateManyWithoutCommentsInput";
import { MediaUpdateManyWithoutCommentsInput } from "./MediaUpdateManyWithoutCommentsInput";
import { EnumCommentMetaType } from "./EnumCommentMetaType";
import { PostWhereUniqueInput } from "../../post/base/PostWhereUniqueInput";
import { ReportUpdateManyWithoutCommentsInput } from "./ReportUpdateManyWithoutCommentsInput";
import { ShareUpdateManyWithoutCommentsInput } from "./ShareUpdateManyWithoutCommentsInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class CommentUpdateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  commentContent?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  date?: Date | null;

  @ApiProperty({
    required: false,
    enum: EnumCommentHashtags,
  })
  @IsEnum(EnumCommentHashtags)
  @IsOptional()
  @Field(() => EnumCommentHashtags, {
    nullable: true,
  })
  hashtags?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isMedia?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => LikeUpdateManyWithoutCommentsInput,
  })
  @ValidateNested()
  @Type(() => LikeUpdateManyWithoutCommentsInput)
  @IsOptional()
  @Field(() => LikeUpdateManyWithoutCommentsInput, {
    nullable: true,
  })
  likes?: LikeUpdateManyWithoutCommentsInput;

  @ApiProperty({
    required: false,
    type: () => MediaUpdateManyWithoutCommentsInput,
  })
  @ValidateNested()
  @Type(() => MediaUpdateManyWithoutCommentsInput)
  @IsOptional()
  @Field(() => MediaUpdateManyWithoutCommentsInput, {
    nullable: true,
  })
  mediaItems?: MediaUpdateManyWithoutCommentsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  meta?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumCommentMetaType,
  })
  @IsEnum(EnumCommentMetaType)
  @IsOptional()
  @Field(() => EnumCommentMetaType, {
    nullable: true,
  })
  metaType?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: () => PostWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PostWhereUniqueInput)
  @IsOptional()
  @Field(() => PostWhereUniqueInput, {
    nullable: true,
  })
  post?: PostWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ReportUpdateManyWithoutCommentsInput,
  })
  @ValidateNested()
  @Type(() => ReportUpdateManyWithoutCommentsInput)
  @IsOptional()
  @Field(() => ReportUpdateManyWithoutCommentsInput, {
    nullable: true,
  })
  reports?: ReportUpdateManyWithoutCommentsInput;

  @ApiProperty({
    required: false,
    type: () => ShareUpdateManyWithoutCommentsInput,
  })
  @ValidateNested()
  @Type(() => ShareUpdateManyWithoutCommentsInput)
  @IsOptional()
  @Field(() => ShareUpdateManyWithoutCommentsInput, {
    nullable: true,
  })
  shares?: ShareUpdateManyWithoutCommentsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  tagged?: string | null;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput | null;
}

export { CommentUpdateInput as CommentUpdateInput };
