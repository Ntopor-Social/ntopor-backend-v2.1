/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { Type } from "class-transformer";
import { IsOptional, IsEnum, ValidateNested } from "class-validator";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { EnumCommentHashtags } from "./EnumCommentHashtags";
import { StringFilter } from "../../util/StringFilter";
import { BooleanNullableFilter } from "../../util/BooleanNullableFilter";
import { LikeListRelationFilter } from "../../like/base/LikeListRelationFilter";
import { MediaListRelationFilter } from "../../media/base/MediaListRelationFilter";
import { EnumCommentMetaType } from "./EnumCommentMetaType";
import { PostWhereUniqueInput } from "../../post/base/PostWhereUniqueInput";
import { ReportListRelationFilter } from "../../report/base/ReportListRelationFilter";
import { ShareListRelationFilter } from "../../share/base/ShareListRelationFilter";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class CommentWhereInput {
  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  commentContent?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  date?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumCommentHashtags,
  })
  @IsEnum(EnumCommentHashtags)
  @IsOptional()
  @Field(() => EnumCommentHashtags, {
    nullable: true,
  })
  hashtags?: "Option1";

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isMedia?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: () => LikeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => LikeListRelationFilter)
  @IsOptional()
  @Field(() => LikeListRelationFilter, {
    nullable: true,
  })
  likes?: LikeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => MediaListRelationFilter,
  })
  @ValidateNested()
  @Type(() => MediaListRelationFilter)
  @IsOptional()
  @Field(() => MediaListRelationFilter, {
    nullable: true,
  })
  mediaItems?: MediaListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  meta?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumCommentMetaType,
  })
  @IsEnum(EnumCommentMetaType)
  @IsOptional()
  @Field(() => EnumCommentMetaType, {
    nullable: true,
  })
  metaType?: "Option1";

  @ApiProperty({
    required: false,
    type: () => PostWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PostWhereUniqueInput)
  @IsOptional()
  @Field(() => PostWhereUniqueInput, {
    nullable: true,
  })
  post?: PostWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => ReportListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ReportListRelationFilter)
  @IsOptional()
  @Field(() => ReportListRelationFilter, {
    nullable: true,
  })
  reports?: ReportListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ShareListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ShareListRelationFilter)
  @IsOptional()
  @Field(() => ShareListRelationFilter, {
    nullable: true,
  })
  shares?: ShareListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  tagged?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput;
}

export { CommentWhereInput as CommentWhereInput };
